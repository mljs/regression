{"version":3,"file":"ml-regression.min.js","sources":["../node_modules/is-any-array/lib-esm/index.js","../node_modules/ml-regression-base/lib-esm/checkArrayLength.js","../node_modules/ml-regression-base/lib-esm/BaseRegression.js","../node_modules/ml-regression-base/lib-esm/maybeToPrecision.js","../node_modules/ml-array-rescale/lib-es6/index.js","../node_modules/ml-array-min/lib-es6/index.js","../node_modules/ml-array-max/lib-es6/index.js","../node_modules/ml-matrix/matrix.js","../node_modules/ml-matrix/matrix.mjs","../node_modules/ml-regression-polynomial/lib-esm/index.js","../src/regression/potential-regression.js","../node_modules/ml-regression-simple-linear/lib-esm/index.js","../node_modules/ml-regression-exponential/src/index.js","../node_modules/ml-regression-power/src/index.js","../node_modules/ml-regression-multivariate-linear/src/index.js","../node_modules/ml-distance-euclidean/lib-es6/euclidean.js","../node_modules/ml-kernel-gaussian/gaussian-kernel.js","../node_modules/ml-kernel-polynomial/polynomial-kernel.js","../node_modules/ml-kernel-sigmoid/sigmoid-kernel.js","../node_modules/ml-kernel/src/kernels/anova-kernel.js","../node_modules/ml-kernel/src/kernels/cauchy-kernel.js","../node_modules/ml-kernel/src/kernels/exponential-kernel.js","../node_modules/ml-kernel/src/kernels/histogram-intersection-kernel.js","../node_modules/ml-kernel/src/kernels/laplacian-kernel.js","../node_modules/ml-kernel/src/kernels/multiquadratic-kernel.js","../node_modules/ml-kernel/src/kernels/rational-quadratic-kernel.js","../node_modules/ml-kernel/src/kernel.js","../src/regression/kernel-ridge-regression.js","../src/regression/poly-fit-regression2d.js","../node_modules/median-quickselect/lib/median-quickselect.min.js","../node_modules/ml-array-median/lib-es6/index.js","../node_modules/ml-regression-theil-sen/src/index.js","../node_modules/ml-regression-robust-polynomial/lib-esm/utilities/predict.js","../node_modules/ml-regression-robust-polynomial/lib-esm/utilities/calcCoefficients.js","../node_modules/ml-regression-robust-polynomial/lib-esm/utilities/residualsMedian.js","../node_modules/ml-regression-robust-polynomial/lib-esm/utilities/robustPolynomial.js","../node_modules/ml-regression-robust-polynomial/lib-esm/utilities/getRandomTuples.js","../node_modules/ml-regression-robust-polynomial/lib-esm/index.js","../src/index.js"],"sourcesContent":["// eslint-disable-next-line @typescript-eslint/unbound-method\nconst toString = Object.prototype.toString;\n/**\n * Checks if an object is an instance of an Array (array or typed array, except those that contain bigint values).\n *\n * @param value - Object to check.\n * @returns True if the object is an array or a typed array.\n */\nexport function isAnyArray(value) {\n    const tag = toString.call(value);\n    return tag.endsWith('Array]') && !tag.includes('Big');\n}\n//# sourceMappingURL=index.js.map","import { isAnyArray } from 'is-any-array';\n/**\n * Check that x and y are arrays with the same length.\n * @param x - first array\n * @param y - second array\n * @throws if x or y are not the same length, or if they are not arrays\n */\nexport function checkArrayLength(x, y) {\n    if (!isAnyArray(x) || !isAnyArray(y)) {\n        throw new TypeError('x and y must be arrays');\n    }\n    if (x.length !== y.length) {\n        throw new RangeError('x and y arrays must have the same length');\n    }\n}\n//# sourceMappingURL=checkArrayLength.js.map","import { isAnyArray } from 'is-any-array';\nimport { checkArrayLength } from './checkArrayLength';\nexport class BaseRegression {\n    constructor() {\n        if (new.target === BaseRegression) {\n            throw new Error('BaseRegression must be subclassed');\n        }\n    }\n    predict(x) {\n        if (typeof x === 'number') {\n            return this._predict(x);\n        }\n        else if (isAnyArray(x)) {\n            const y = [];\n            for (const xVal of x) {\n                y.push(this._predict(xVal));\n            }\n            return y;\n        }\n        else {\n            throw new TypeError('x must be a number or array');\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _predict(x) {\n        throw new Error('_predict must be implemented');\n    }\n    train() {\n        // Do nothing for this package\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    toString(precision) {\n        return '';\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    toLaTeX(precision) {\n        return '';\n    }\n    /**\n     * Return the correlation coefficient of determination (r) and chi-square.\n     * @param x - explanatory variable\n     * @param y - response variable\n     * @return - Object with further statistics.\n     */\n    score(x, y) {\n        checkArrayLength(x, y);\n        const n = x.length;\n        const y2 = new Array(n);\n        for (let i = 0; i < n; i++) {\n            y2[i] = this._predict(x[i]);\n        }\n        let xSum = 0;\n        let ySum = 0;\n        let chi2 = 0;\n        let rmsd = 0;\n        let xSquared = 0;\n        let ySquared = 0;\n        let xY = 0;\n        for (let i = 0; i < n; i++) {\n            xSum += y2[i];\n            ySum += y[i];\n            xSquared += y2[i] * y2[i];\n            ySquared += y[i] * y[i];\n            xY += y2[i] * y[i];\n            if (y[i] !== 0) {\n                chi2 += ((y[i] - y2[i]) * (y[i] - y2[i])) / y[i];\n            }\n            rmsd += (y[i] - y2[i]) * (y[i] - y2[i]);\n        }\n        const r = (n * xY - xSum * ySum) /\n            Math.sqrt((n * xSquared - xSum * xSum) * (n * ySquared - ySum * ySum));\n        return {\n            r,\n            r2: r * r,\n            chi2,\n            rmsd: Math.sqrt(rmsd / n),\n        };\n    }\n}\n//# sourceMappingURL=BaseRegression.js.map","/**\n * Cast `number` to string. Optionally `digits` specifies significant figures.\n * @param number\n * @param figures\n * @returns - A string representation of `number`.\n */\nexport function maybeToPrecision(number, figures) {\n    if (number < 0) {\n        number = 0 - number;\n        if (typeof figures === 'number') {\n            return `- ${number.toPrecision(figures)}`;\n        }\n        else {\n            return `- ${number.toString()}`;\n        }\n    }\n    else if (typeof figures === 'number') {\n        return number.toPrecision(figures);\n    }\n    else {\n        return number.toString();\n    }\n}\n//# sourceMappingURL=maybeToPrecision.js.map","import { isAnyArray } from 'is-any-array';\nimport max from 'ml-array-max';\nimport min from 'ml-array-min';\n\nfunction rescale(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isAnyArray(input)) {\n    throw new TypeError('input must be an array');\n  } else if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var output;\n\n  if (options.output !== undefined) {\n    if (!isAnyArray(options.output)) {\n      throw new TypeError('output option must be an array if specified');\n    }\n\n    output = options.output;\n  } else {\n    output = new Array(input.length);\n  }\n\n  var currentMin = min(input);\n  var currentMax = max(input);\n\n  if (currentMin === currentMax) {\n    throw new RangeError('minimum and maximum input values are equal. Cannot rescale a constant array');\n  }\n\n  var _options$min = options.min,\n      minValue = _options$min === void 0 ? options.autoMinMax ? currentMin : 0 : _options$min,\n      _options$max = options.max,\n      maxValue = _options$max === void 0 ? options.autoMinMax ? currentMax : 1 : _options$max;\n\n  if (minValue >= maxValue) {\n    throw new RangeError('min option must be smaller than max option');\n  }\n\n  var factor = (maxValue - minValue) / (currentMax - currentMin);\n\n  for (var i = 0; i < input.length; i++) {\n    output[i] = (input[i] - currentMin) * factor + minValue;\n  }\n\n  return output;\n}\n\nexport { rescale as default };\n","import { isAnyArray } from 'is-any-array';\n\nfunction min(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isAnyArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var _options$fromIndex = options.fromIndex,\n      fromIndex = _options$fromIndex === void 0 ? 0 : _options$fromIndex,\n      _options$toIndex = options.toIndex,\n      toIndex = _options$toIndex === void 0 ? input.length : _options$toIndex;\n\n  if (fromIndex < 0 || fromIndex >= input.length || !Number.isInteger(fromIndex)) {\n    throw new Error('fromIndex must be a positive integer smaller than length');\n  }\n\n  if (toIndex <= fromIndex || toIndex > input.length || !Number.isInteger(toIndex)) {\n    throw new Error('toIndex must be an integer greater than fromIndex and at most equal to length');\n  }\n\n  var minValue = input[fromIndex];\n\n  for (var i = fromIndex + 1; i < toIndex; i++) {\n    if (input[i] < minValue) minValue = input[i];\n  }\n\n  return minValue;\n}\n\nexport { min as default };\n","import { isAnyArray } from 'is-any-array';\n\nfunction max(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isAnyArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var _options$fromIndex = options.fromIndex,\n      fromIndex = _options$fromIndex === void 0 ? 0 : _options$fromIndex,\n      _options$toIndex = options.toIndex,\n      toIndex = _options$toIndex === void 0 ? input.length : _options$toIndex;\n\n  if (fromIndex < 0 || fromIndex >= input.length || !Number.isInteger(fromIndex)) {\n    throw new Error('fromIndex must be a positive integer smaller than length');\n  }\n\n  if (toIndex <= fromIndex || toIndex > input.length || !Number.isInteger(toIndex)) {\n    throw new Error('toIndex must be an integer greater than fromIndex and at most equal to length');\n  }\n\n  var maxValue = input[fromIndex];\n\n  for (var i = fromIndex + 1; i < toIndex; i++) {\n    if (input[i] > maxValue) maxValue = input[i];\n  }\n\n  return maxValue;\n}\n\nexport { max as default };\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar isAnyArray = require('is-any-array');\nvar rescale = require('ml-array-rescale');\n\nconst indent = ' '.repeat(2);\nconst indentData = ' '.repeat(4);\n\n/**\n * @this {Matrix}\n * @returns {string}\n */\nfunction inspectMatrix() {\n  return inspectMatrixWithOptions(this);\n}\n\nfunction inspectMatrixWithOptions(matrix, options = {}) {\n  const {\n    maxRows = 15,\n    maxColumns = 10,\n    maxNumSize = 8,\n    padMinus = 'auto',\n  } = options;\n  return `${matrix.constructor.name} {\n${indent}[\n${indentData}${inspectData(matrix, maxRows, maxColumns, maxNumSize, padMinus)}\n${indent}]\n${indent}rows: ${matrix.rows}\n${indent}columns: ${matrix.columns}\n}`;\n}\n\nfunction inspectData(matrix, maxRows, maxColumns, maxNumSize, padMinus) {\n  const { rows, columns } = matrix;\n  const maxI = Math.min(rows, maxRows);\n  const maxJ = Math.min(columns, maxColumns);\n  const result = [];\n\n  if (padMinus === 'auto') {\n    padMinus = false;\n    loop: for (let i = 0; i < maxI; i++) {\n      for (let j = 0; j < maxJ; j++) {\n        if (matrix.get(i, j) < 0) {\n          padMinus = true;\n          break loop;\n        }\n      }\n    }\n  }\n\n  for (let i = 0; i < maxI; i++) {\n    let line = [];\n    for (let j = 0; j < maxJ; j++) {\n      line.push(formatNumber(matrix.get(i, j), maxNumSize, padMinus));\n    }\n    result.push(`${line.join(' ')}`);\n  }\n  if (maxJ !== columns) {\n    result[result.length - 1] += ` ... ${columns - maxColumns} more columns`;\n  }\n  if (maxI !== rows) {\n    result.push(`... ${rows - maxRows} more rows`);\n  }\n  return result.join(`\\n${indentData}`);\n}\n\nfunction formatNumber(num, maxNumSize, padMinus) {\n  return (\n    num >= 0 && padMinus\n      ? ` ${formatNumber2(num, maxNumSize - 1)}`\n      : formatNumber2(num, maxNumSize)\n  ).padEnd(maxNumSize);\n}\n\nfunction formatNumber2(num, len) {\n  // small.length numbers should be as is\n  let str = num.toString();\n  if (str.length <= len) return str;\n\n  // (7)'0.00123' is better then (7)'1.23e-2'\n  // (8)'0.000123' is worse then (7)'1.23e-3',\n  let fix = num.toFixed(len);\n  if (fix.length > len) {\n    fix = num.toFixed(Math.max(0, len - (fix.length - len)));\n  }\n  if (\n    fix.length <= len &&\n    !fix.startsWith('0.000') &&\n    !fix.startsWith('-0.000')\n  ) {\n    return fix;\n  }\n\n  // well, if it's still too long the user should've used longer numbers\n  let exp = num.toExponential(len);\n  if (exp.length > len) {\n    exp = num.toExponential(Math.max(0, len - (exp.length - len)));\n  }\n  return exp.slice(0);\n}\n\nfunction installMathOperations(AbstractMatrix, Matrix) {\n  AbstractMatrix.prototype.add = function add(value) {\n    if (typeof value === 'number') return this.addS(value);\n    return this.addM(value);\n  };\n\n  AbstractMatrix.prototype.addS = function addS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.addM = function addM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.add = function add(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.add(value);\n  };\n\n  AbstractMatrix.prototype.sub = function sub(value) {\n    if (typeof value === 'number') return this.subS(value);\n    return this.subM(value);\n  };\n\n  AbstractMatrix.prototype.subS = function subS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.subM = function subM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sub = function sub(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sub(value);\n  };\n  AbstractMatrix.prototype.subtract = AbstractMatrix.prototype.sub;\n  AbstractMatrix.prototype.subtractS = AbstractMatrix.prototype.subS;\n  AbstractMatrix.prototype.subtractM = AbstractMatrix.prototype.subM;\n  AbstractMatrix.subtract = AbstractMatrix.sub;\n\n  AbstractMatrix.prototype.mul = function mul(value) {\n    if (typeof value === 'number') return this.mulS(value);\n    return this.mulM(value);\n  };\n\n  AbstractMatrix.prototype.mulS = function mulS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.mulM = function mulM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.mul = function mul(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.mul(value);\n  };\n  AbstractMatrix.prototype.multiply = AbstractMatrix.prototype.mul;\n  AbstractMatrix.prototype.multiplyS = AbstractMatrix.prototype.mulS;\n  AbstractMatrix.prototype.multiplyM = AbstractMatrix.prototype.mulM;\n  AbstractMatrix.multiply = AbstractMatrix.mul;\n\n  AbstractMatrix.prototype.div = function div(value) {\n    if (typeof value === 'number') return this.divS(value);\n    return this.divM(value);\n  };\n\n  AbstractMatrix.prototype.divS = function divS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.divM = function divM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.div = function div(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.div(value);\n  };\n  AbstractMatrix.prototype.divide = AbstractMatrix.prototype.div;\n  AbstractMatrix.prototype.divideS = AbstractMatrix.prototype.divS;\n  AbstractMatrix.prototype.divideM = AbstractMatrix.prototype.divM;\n  AbstractMatrix.divide = AbstractMatrix.div;\n\n  AbstractMatrix.prototype.mod = function mod(value) {\n    if (typeof value === 'number') return this.modS(value);\n    return this.modM(value);\n  };\n\n  AbstractMatrix.prototype.modS = function modS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) % value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.modM = function modM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) % matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.mod = function mod(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.mod(value);\n  };\n  AbstractMatrix.prototype.modulus = AbstractMatrix.prototype.mod;\n  AbstractMatrix.prototype.modulusS = AbstractMatrix.prototype.modS;\n  AbstractMatrix.prototype.modulusM = AbstractMatrix.prototype.modM;\n  AbstractMatrix.modulus = AbstractMatrix.mod;\n\n  AbstractMatrix.prototype.and = function and(value) {\n    if (typeof value === 'number') return this.andS(value);\n    return this.andM(value);\n  };\n\n  AbstractMatrix.prototype.andS = function andS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) & value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.andM = function andM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) & matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.and = function and(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.and(value);\n  };\n\n  AbstractMatrix.prototype.or = function or(value) {\n    if (typeof value === 'number') return this.orS(value);\n    return this.orM(value);\n  };\n\n  AbstractMatrix.prototype.orS = function orS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) | value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.orM = function orM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) | matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.or = function or(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.or(value);\n  };\n\n  AbstractMatrix.prototype.xor = function xor(value) {\n    if (typeof value === 'number') return this.xorS(value);\n    return this.xorM(value);\n  };\n\n  AbstractMatrix.prototype.xorS = function xorS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ^ value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.xorM = function xorM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ^ matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.xor = function xor(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.xor(value);\n  };\n\n  AbstractMatrix.prototype.leftShift = function leftShift(value) {\n    if (typeof value === 'number') return this.leftShiftS(value);\n    return this.leftShiftM(value);\n  };\n\n  AbstractMatrix.prototype.leftShiftS = function leftShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) << value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.leftShiftM = function leftShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) << matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.leftShift = function leftShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.leftShift(value);\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShift = function signPropagatingRightShift(value) {\n    if (typeof value === 'number') return this.signPropagatingRightShiftS(value);\n    return this.signPropagatingRightShiftM(value);\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShiftS = function signPropagatingRightShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >> value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShiftM = function signPropagatingRightShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >> matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.signPropagatingRightShift = function signPropagatingRightShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.signPropagatingRightShift(value);\n  };\n\n  AbstractMatrix.prototype.rightShift = function rightShift(value) {\n    if (typeof value === 'number') return this.rightShiftS(value);\n    return this.rightShiftM(value);\n  };\n\n  AbstractMatrix.prototype.rightShiftS = function rightShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >>> value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.rightShiftM = function rightShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >>> matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.rightShift = function rightShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.rightShift(value);\n  };\n  AbstractMatrix.prototype.zeroFillRightShift = AbstractMatrix.prototype.rightShift;\n  AbstractMatrix.prototype.zeroFillRightShiftS = AbstractMatrix.prototype.rightShiftS;\n  AbstractMatrix.prototype.zeroFillRightShiftM = AbstractMatrix.prototype.rightShiftM;\n  AbstractMatrix.zeroFillRightShift = AbstractMatrix.rightShift;\n\n  AbstractMatrix.prototype.not = function not() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, ~(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.not = function not(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.not();\n  };\n\n  AbstractMatrix.prototype.abs = function abs() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.abs(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.abs = function abs(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.abs();\n  };\n\n  AbstractMatrix.prototype.acos = function acos() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.acos(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.acos = function acos(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.acos();\n  };\n\n  AbstractMatrix.prototype.acosh = function acosh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.acosh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.acosh = function acosh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.acosh();\n  };\n\n  AbstractMatrix.prototype.asin = function asin() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.asin(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.asin = function asin(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.asin();\n  };\n\n  AbstractMatrix.prototype.asinh = function asinh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.asinh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.asinh = function asinh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.asinh();\n  };\n\n  AbstractMatrix.prototype.atan = function atan() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.atan(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.atan = function atan(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.atan();\n  };\n\n  AbstractMatrix.prototype.atanh = function atanh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.atanh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.atanh = function atanh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.atanh();\n  };\n\n  AbstractMatrix.prototype.cbrt = function cbrt() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cbrt(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cbrt = function cbrt(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cbrt();\n  };\n\n  AbstractMatrix.prototype.ceil = function ceil() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.ceil(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.ceil = function ceil(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.ceil();\n  };\n\n  AbstractMatrix.prototype.clz32 = function clz32() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.clz32(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.clz32 = function clz32(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.clz32();\n  };\n\n  AbstractMatrix.prototype.cos = function cos() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cos(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cos = function cos(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cos();\n  };\n\n  AbstractMatrix.prototype.cosh = function cosh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cosh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cosh = function cosh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cosh();\n  };\n\n  AbstractMatrix.prototype.exp = function exp() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.exp(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.exp = function exp(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.exp();\n  };\n\n  AbstractMatrix.prototype.expm1 = function expm1() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.expm1(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.expm1 = function expm1(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.expm1();\n  };\n\n  AbstractMatrix.prototype.floor = function floor() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.floor(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.floor = function floor(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.floor();\n  };\n\n  AbstractMatrix.prototype.fround = function fround() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.fround(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.fround = function fround(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.fround();\n  };\n\n  AbstractMatrix.prototype.log = function log() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log = function log(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log();\n  };\n\n  AbstractMatrix.prototype.log1p = function log1p() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log1p(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log1p = function log1p(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log1p();\n  };\n\n  AbstractMatrix.prototype.log10 = function log10() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log10(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log10 = function log10(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log10();\n  };\n\n  AbstractMatrix.prototype.log2 = function log2() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log2(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log2 = function log2(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log2();\n  };\n\n  AbstractMatrix.prototype.round = function round() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.round(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.round = function round(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.round();\n  };\n\n  AbstractMatrix.prototype.sign = function sign() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sign(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sign = function sign(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sign();\n  };\n\n  AbstractMatrix.prototype.sin = function sin() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sin(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sin = function sin(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sin();\n  };\n\n  AbstractMatrix.prototype.sinh = function sinh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sinh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sinh = function sinh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sinh();\n  };\n\n  AbstractMatrix.prototype.sqrt = function sqrt() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sqrt(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sqrt = function sqrt(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sqrt();\n  };\n\n  AbstractMatrix.prototype.tan = function tan() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.tan(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.tan = function tan(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.tan();\n  };\n\n  AbstractMatrix.prototype.tanh = function tanh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.tanh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.tanh = function tanh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.tanh();\n  };\n\n  AbstractMatrix.prototype.trunc = function trunc() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.trunc(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.trunc = function trunc(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.trunc();\n  };\n\n  AbstractMatrix.pow = function pow(matrix, arg0) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.pow(arg0);\n  };\n\n  AbstractMatrix.prototype.pow = function pow(value) {\n    if (typeof value === 'number') return this.powS(value);\n    return this.powM(value);\n  };\n\n  AbstractMatrix.prototype.powS = function powS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ** value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.powM = function powM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ** matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n}\n\n/**\n * @private\n * Check that a row index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nfunction checkRowIndex(matrix, index, outer) {\n  let max = outer ? matrix.rows : matrix.rows - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Row index out of range');\n  }\n}\n\n/**\n * @private\n * Check that a column index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nfunction checkColumnIndex(matrix, index, outer) {\n  let max = outer ? matrix.columns : matrix.columns - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Column index out of range');\n  }\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nfunction checkRowVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.columns) {\n    throw new RangeError(\n      'vector size must be the same as the number of columns',\n    );\n  }\n  return vector;\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nfunction checkColumnVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.rows) {\n    throw new RangeError('vector size must be the same as the number of rows');\n  }\n  return vector;\n}\n\nfunction checkRowIndices(matrix, rowIndices) {\n  if (!isAnyArray.isAnyArray(rowIndices)) {\n    throw new TypeError('row indices must be an array');\n  }\n\n  for (let i = 0; i < rowIndices.length; i++) {\n    if (rowIndices[i] < 0 || rowIndices[i] >= matrix.rows) {\n      throw new RangeError('row indices are out of range');\n    }\n  }\n}\n\nfunction checkColumnIndices(matrix, columnIndices) {\n  if (!isAnyArray.isAnyArray(columnIndices)) {\n    throw new TypeError('column indices must be an array');\n  }\n\n  for (let i = 0; i < columnIndices.length; i++) {\n    if (columnIndices[i] < 0 || columnIndices[i] >= matrix.columns) {\n      throw new RangeError('column indices are out of range');\n    }\n  }\n}\n\nfunction checkRange(matrix, startRow, endRow, startColumn, endColumn) {\n  if (arguments.length !== 5) {\n    throw new RangeError('expected 4 arguments');\n  }\n  checkNumber('startRow', startRow);\n  checkNumber('endRow', endRow);\n  checkNumber('startColumn', startColumn);\n  checkNumber('endColumn', endColumn);\n  if (\n    startRow > endRow ||\n    startColumn > endColumn ||\n    startRow < 0 ||\n    startRow >= matrix.rows ||\n    endRow < 0 ||\n    endRow >= matrix.rows ||\n    startColumn < 0 ||\n    startColumn >= matrix.columns ||\n    endColumn < 0 ||\n    endColumn >= matrix.columns\n  ) {\n    throw new RangeError('Submatrix indices are out of range');\n  }\n}\n\nfunction newArray(length, value = 0) {\n  let array = [];\n  for (let i = 0; i < length; i++) {\n    array.push(value);\n  }\n  return array;\n}\n\nfunction checkNumber(name, value) {\n  if (typeof value !== 'number') {\n    throw new TypeError(`${name} must be a number`);\n  }\n}\n\nfunction checkNonEmpty(matrix) {\n  if (matrix.isEmpty()) {\n    throw new Error('Empty matrix has no elements to index');\n  }\n}\n\nfunction sumByRow(matrix) {\n  let sum = newArray(matrix.rows);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[i] += matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nfunction sumByColumn(matrix) {\n  let sum = newArray(matrix.columns);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[j] += matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nfunction sumAll(matrix) {\n  let v = 0;\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      v += matrix.get(i, j);\n    }\n  }\n  return v;\n}\n\nfunction productByRow(matrix) {\n  let sum = newArray(matrix.rows, 1);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[i] *= matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nfunction productByColumn(matrix) {\n  let sum = newArray(matrix.columns, 1);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[j] *= matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nfunction productAll(matrix) {\n  let v = 1;\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      v *= matrix.get(i, j);\n    }\n  }\n  return v;\n}\n\nfunction varianceByRow(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const variance = [];\n\n  for (let i = 0; i < rows; i++) {\n    let sum1 = 0;\n    let sum2 = 0;\n    let x = 0;\n    for (let j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean[i];\n      sum1 += x;\n      sum2 += x * x;\n    }\n    if (unbiased) {\n      variance.push((sum2 - (sum1 * sum1) / cols) / (cols - 1));\n    } else {\n      variance.push((sum2 - (sum1 * sum1) / cols) / cols);\n    }\n  }\n  return variance;\n}\n\nfunction varianceByColumn(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const variance = [];\n\n  for (let j = 0; j < cols; j++) {\n    let sum1 = 0;\n    let sum2 = 0;\n    let x = 0;\n    for (let i = 0; i < rows; i++) {\n      x = matrix.get(i, j) - mean[j];\n      sum1 += x;\n      sum2 += x * x;\n    }\n    if (unbiased) {\n      variance.push((sum2 - (sum1 * sum1) / rows) / (rows - 1));\n    } else {\n      variance.push((sum2 - (sum1 * sum1) / rows) / rows);\n    }\n  }\n  return variance;\n}\n\nfunction varianceAll(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const size = rows * cols;\n\n  let sum1 = 0;\n  let sum2 = 0;\n  let x = 0;\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean;\n      sum1 += x;\n      sum2 += x * x;\n    }\n  }\n  if (unbiased) {\n    return (sum2 - (sum1 * sum1) / size) / (size - 1);\n  } else {\n    return (sum2 - (sum1 * sum1) / size) / size;\n  }\n}\n\nfunction centerByRow(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[i]);\n    }\n  }\n}\n\nfunction centerByColumn(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[j]);\n    }\n  }\n}\n\nfunction centerAll(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean);\n    }\n  }\n}\n\nfunction getScaleByRow(matrix) {\n  const scale = [];\n  for (let i = 0; i < matrix.rows; i++) {\n    let sum = 0;\n    for (let j = 0; j < matrix.columns; j++) {\n      sum += matrix.get(i, j) ** 2 / (matrix.columns - 1);\n    }\n    scale.push(Math.sqrt(sum));\n  }\n  return scale;\n}\n\nfunction scaleByRow(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[i]);\n    }\n  }\n}\n\nfunction getScaleByColumn(matrix) {\n  const scale = [];\n  for (let j = 0; j < matrix.columns; j++) {\n    let sum = 0;\n    for (let i = 0; i < matrix.rows; i++) {\n      sum += matrix.get(i, j) ** 2 / (matrix.rows - 1);\n    }\n    scale.push(Math.sqrt(sum));\n  }\n  return scale;\n}\n\nfunction scaleByColumn(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[j]);\n    }\n  }\n}\n\nfunction getScaleAll(matrix) {\n  const divider = matrix.size - 1;\n  let sum = 0;\n  for (let j = 0; j < matrix.columns; j++) {\n    for (let i = 0; i < matrix.rows; i++) {\n      sum += matrix.get(i, j) ** 2 / divider;\n    }\n  }\n  return Math.sqrt(sum);\n}\n\nfunction scaleAll(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale);\n    }\n  }\n}\n\nclass AbstractMatrix {\n  static from1DArray(newRows, newColumns, newData) {\n    let length = newRows * newColumns;\n    if (length !== newData.length) {\n      throw new RangeError('data length does not match given dimensions');\n    }\n    let newMatrix = new Matrix(newRows, newColumns);\n    for (let row = 0; row < newRows; row++) {\n      for (let column = 0; column < newColumns; column++) {\n        newMatrix.set(row, column, newData[row * newColumns + column]);\n      }\n    }\n    return newMatrix;\n  }\n\n  static rowVector(newData) {\n    let vector = new Matrix(1, newData.length);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(0, i, newData[i]);\n    }\n    return vector;\n  }\n\n  static columnVector(newData) {\n    let vector = new Matrix(newData.length, 1);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(i, 0, newData[i]);\n    }\n    return vector;\n  }\n\n  static zeros(rows, columns) {\n    return new Matrix(rows, columns);\n  }\n\n  static ones(rows, columns) {\n    return new Matrix(rows, columns).fill(1);\n  }\n\n  static rand(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { random = Math.random } = options;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.set(i, j, random());\n      }\n    }\n    return matrix;\n  }\n\n  static randInt(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1000, random = Math.random } = options;\n    if (!Number.isInteger(min)) throw new TypeError('min must be an integer');\n    if (!Number.isInteger(max)) throw new TypeError('max must be an integer');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let interval = max - min;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        let value = min + Math.round(random() * interval);\n        matrix.set(i, j, value);\n      }\n    }\n    return matrix;\n  }\n\n  static eye(rows, columns, value) {\n    if (columns === undefined) columns = rows;\n    if (value === undefined) value = 1;\n    let min = Math.min(rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, value);\n    }\n    return matrix;\n  }\n\n  static diag(data, rows, columns) {\n    let l = data.length;\n    if (rows === undefined) rows = l;\n    if (columns === undefined) columns = rows;\n    let min = Math.min(l, rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, data[i]);\n    }\n    return matrix;\n  }\n\n  static min(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n\n  static max(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new this(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n\n  static checkMatrix(value) {\n    return AbstractMatrix.isMatrix(value) ? value : new Matrix(value);\n  }\n\n  static isMatrix(value) {\n    return value != null && value.klass === 'Matrix';\n  }\n\n  get size() {\n    return this.rows * this.columns;\n  }\n\n  apply(callback) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('callback must be a function');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        callback.call(this, i, j);\n      }\n    }\n    return this;\n  }\n\n  to1DArray() {\n    let array = [];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        array.push(this.get(i, j));\n      }\n    }\n    return array;\n  }\n\n  to2DArray() {\n    let copy = [];\n    for (let i = 0; i < this.rows; i++) {\n      copy.push([]);\n      for (let j = 0; j < this.columns; j++) {\n        copy[i].push(this.get(i, j));\n      }\n    }\n    return copy;\n  }\n\n  toJSON() {\n    return this.to2DArray();\n  }\n\n  isRowVector() {\n    return this.rows === 1;\n  }\n\n  isColumnVector() {\n    return this.columns === 1;\n  }\n\n  isVector() {\n    return this.rows === 1 || this.columns === 1;\n  }\n\n  isSquare() {\n    return this.rows === this.columns;\n  }\n\n  isEmpty() {\n    return this.rows === 0 || this.columns === 0;\n  }\n\n  isSymmetric() {\n    if (this.isSquare()) {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j <= i; j++) {\n          if (this.get(i, j) !== this.get(j, i)) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  isDistance() {\n    if (!this.isSymmetric()) return false;\n\n    for (let i = 0; i < this.rows; i++) {\n      if (this.get(i, i) !== 0) return false;\n    }\n\n    return true;\n  }\n\n  isEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isEchelonForm = false;\n          checked = true;\n        }\n      }\n      i++;\n    }\n    return isEchelonForm;\n  }\n\n  isReducedEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isReducedEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isReducedEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isReducedEchelonForm = false;\n          checked = true;\n        }\n      }\n      for (let k = j + 1; k < this.rows; k++) {\n        if (this.get(i, k) !== 0) {\n          isReducedEchelonForm = false;\n        }\n      }\n      i++;\n    }\n    return isReducedEchelonForm;\n  }\n\n  echelonForm() {\n    let result = this.clone();\n    let h = 0;\n    let k = 0;\n    while (h < result.rows && k < result.columns) {\n      let iMax = h;\n      for (let i = h; i < result.rows; i++) {\n        if (result.get(i, k) > result.get(iMax, k)) {\n          iMax = i;\n        }\n      }\n      if (result.get(iMax, k) === 0) {\n        k++;\n      } else {\n        result.swapRows(h, iMax);\n        let tmp = result.get(h, k);\n        for (let j = k; j < result.columns; j++) {\n          result.set(h, j, result.get(h, j) / tmp);\n        }\n        for (let i = h + 1; i < result.rows; i++) {\n          let factor = result.get(i, k) / result.get(h, k);\n          result.set(i, k, 0);\n          for (let j = k + 1; j < result.columns; j++) {\n            result.set(i, j, result.get(i, j) - result.get(h, j) * factor);\n          }\n        }\n        h++;\n        k++;\n      }\n    }\n    return result;\n  }\n\n  reducedEchelonForm() {\n    let result = this.echelonForm();\n    let m = result.columns;\n    let n = result.rows;\n    let h = n - 1;\n    while (h >= 0) {\n      if (result.maxRow(h) === 0) {\n        h--;\n      } else {\n        let p = 0;\n        let pivot = false;\n        while (p < n && pivot === false) {\n          if (result.get(h, p) === 1) {\n            pivot = true;\n          } else {\n            p++;\n          }\n        }\n        for (let i = 0; i < h; i++) {\n          let factor = result.get(i, p);\n          for (let j = p; j < m; j++) {\n            let tmp = result.get(i, j) - factor * result.get(h, j);\n            result.set(i, j, tmp);\n          }\n        }\n        h--;\n      }\n    }\n    return result;\n  }\n\n  set() {\n    throw new Error('set method is unimplemented');\n  }\n\n  get() {\n    throw new Error('get method is unimplemented');\n  }\n\n  repeat(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { rows = 1, columns = 1 } = options;\n    if (!Number.isInteger(rows) || rows <= 0) {\n      throw new TypeError('rows must be a positive integer');\n    }\n    if (!Number.isInteger(columns) || columns <= 0) {\n      throw new TypeError('columns must be a positive integer');\n    }\n    let matrix = new Matrix(this.rows * rows, this.columns * columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.setSubMatrix(this, this.rows * i, this.columns * j);\n      }\n    }\n    return matrix;\n  }\n\n  fill(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, value);\n      }\n    }\n    return this;\n  }\n\n  neg() {\n    return this.mulS(-1);\n  }\n\n  getRow(index) {\n    checkRowIndex(this, index);\n    let row = [];\n    for (let i = 0; i < this.columns; i++) {\n      row.push(this.get(index, i));\n    }\n    return row;\n  }\n\n  getRowVector(index) {\n    return Matrix.rowVector(this.getRow(index));\n  }\n\n  setRow(index, array) {\n    checkRowIndex(this, index);\n    array = checkRowVector(this, array);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, array[i]);\n    }\n    return this;\n  }\n\n  swapRows(row1, row2) {\n    checkRowIndex(this, row1);\n    checkRowIndex(this, row2);\n    for (let i = 0; i < this.columns; i++) {\n      let temp = this.get(row1, i);\n      this.set(row1, i, this.get(row2, i));\n      this.set(row2, i, temp);\n    }\n    return this;\n  }\n\n  getColumn(index) {\n    checkColumnIndex(this, index);\n    let column = [];\n    for (let i = 0; i < this.rows; i++) {\n      column.push(this.get(i, index));\n    }\n    return column;\n  }\n\n  getColumnVector(index) {\n    return Matrix.columnVector(this.getColumn(index));\n  }\n\n  setColumn(index, array) {\n    checkColumnIndex(this, index);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, array[i]);\n    }\n    return this;\n  }\n\n  swapColumns(column1, column2) {\n    checkColumnIndex(this, column1);\n    checkColumnIndex(this, column2);\n    for (let i = 0; i < this.rows; i++) {\n      let temp = this.get(i, column1);\n      this.set(i, column1, this.get(i, column2));\n      this.set(i, column2, temp);\n    }\n    return this;\n  }\n\n  addRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[j]);\n      }\n    }\n    return this;\n  }\n\n  subRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[j]);\n      }\n    }\n    return this;\n  }\n\n  mulRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[j]);\n      }\n    }\n    return this;\n  }\n\n  divRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[j]);\n      }\n    }\n    return this;\n  }\n\n  addColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[i]);\n      }\n    }\n    return this;\n  }\n\n  subColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[i]);\n      }\n    }\n    return this;\n  }\n\n  mulColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[i]);\n      }\n    }\n    return this;\n  }\n\n  divColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[i]);\n      }\n    }\n    return this;\n  }\n\n  mulRow(index, value) {\n    checkRowIndex(this, index);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, this.get(index, i) * value);\n    }\n    return this;\n  }\n\n  mulColumn(index, value) {\n    checkColumnIndex(this, index);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, this.get(i, index) * value);\n    }\n    return this;\n  }\n\n  max(by) {\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    switch (by) {\n      case 'row': {\n        const max = new Array(this.rows).fill(Number.NEGATIVE_INFINITY);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) > max[row]) {\n              max[row] = this.get(row, column);\n            }\n          }\n        }\n        return max;\n      }\n      case 'column': {\n        const max = new Array(this.columns).fill(Number.NEGATIVE_INFINITY);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) > max[column]) {\n              max[column] = this.get(row, column);\n            }\n          }\n        }\n        return max;\n      }\n      case undefined: {\n        let max = this.get(0, 0);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) > max) {\n              max = this.get(row, column);\n            }\n          }\n        }\n        return max;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  maxIndex() {\n    checkNonEmpty(this);\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) > v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n\n  min(by) {\n    if (this.isEmpty()) {\n      return NaN;\n    }\n\n    switch (by) {\n      case 'row': {\n        const min = new Array(this.rows).fill(Number.POSITIVE_INFINITY);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) < min[row]) {\n              min[row] = this.get(row, column);\n            }\n          }\n        }\n        return min;\n      }\n      case 'column': {\n        const min = new Array(this.columns).fill(Number.POSITIVE_INFINITY);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) < min[column]) {\n              min[column] = this.get(row, column);\n            }\n          }\n        }\n        return min;\n      }\n      case undefined: {\n        let min = this.get(0, 0);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) < min) {\n              min = this.get(row, column);\n            }\n          }\n        }\n        return min;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  minIndex() {\n    checkNonEmpty(this);\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) < v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n\n  maxRow(row) {\n    checkRowIndex(this, row);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n\n  maxRowIndex(row) {\n    checkRowIndex(this, row);\n    checkNonEmpty(this);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n\n  minRow(row) {\n    checkRowIndex(this, row);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n\n  minRowIndex(row) {\n    checkRowIndex(this, row);\n    checkNonEmpty(this);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n\n  maxColumn(column) {\n    checkColumnIndex(this, column);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n\n  maxColumnIndex(column) {\n    checkColumnIndex(this, column);\n    checkNonEmpty(this);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n\n  minColumn(column) {\n    checkColumnIndex(this, column);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n\n  minColumnIndex(column) {\n    checkColumnIndex(this, column);\n    checkNonEmpty(this);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n\n  diag() {\n    let min = Math.min(this.rows, this.columns);\n    let diag = [];\n    for (let i = 0; i < min; i++) {\n      diag.push(this.get(i, i));\n    }\n    return diag;\n  }\n\n  norm(type = 'frobenius') {\n    switch (type) {\n      case 'max':\n        return this.max();\n      case 'frobenius':\n        return Math.sqrt(this.dot(this));\n      default:\n        throw new RangeError(`unknown norm type: ${type}`);\n    }\n  }\n\n  cumulativeSum() {\n    let sum = 0;\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        sum += this.get(i, j);\n        this.set(i, j, sum);\n      }\n    }\n    return this;\n  }\n\n  dot(vector2) {\n    if (AbstractMatrix.isMatrix(vector2)) vector2 = vector2.to1DArray();\n    let vector1 = this.to1DArray();\n    if (vector1.length !== vector2.length) {\n      throw new RangeError('vectors do not have the same size');\n    }\n    let dot = 0;\n    for (let i = 0; i < vector1.length; i++) {\n      dot += vector1[i] * vector2[i];\n    }\n    return dot;\n  }\n\n  mmul(other) {\n    other = Matrix.checkMatrix(other);\n\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.columns;\n\n    let result = new Matrix(m, p);\n\n    let Bcolj = new Float64Array(n);\n    for (let j = 0; j < p; j++) {\n      for (let k = 0; k < n; k++) {\n        Bcolj[k] = other.get(k, j);\n      }\n\n      for (let i = 0; i < m; i++) {\n        let s = 0;\n        for (let k = 0; k < n; k++) {\n          s += this.get(i, k) * Bcolj[k];\n        }\n\n        result.set(i, j, s);\n      }\n    }\n    return result;\n  }\n\n  mpow(scalar) {\n    if (!this.isSquare()) {\n      throw new RangeError('Matrix must be square');\n    }\n    if (!Number.isInteger(scalar) || scalar < 0) {\n      throw new RangeError('Exponent must be a non-negative integer');\n    }\n    // Russian Peasant exponentiation, i.e. exponentiation by squaring\n    let result = Matrix.eye(this.rows);\n    let bb = this;\n    // Note: Don't bit shift. In JS, that would truncate at 32 bits\n    for (let e = scalar; e >= 1; e /= 2) {\n      if ((e & 1) !== 0) {\n        result = result.mmul(bb);\n      }\n      bb = bb.mmul(bb);\n    }\n    return result;\n  }\n\n  strassen2x2(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(2, 2);\n    const a11 = this.get(0, 0);\n    const b11 = other.get(0, 0);\n    const a12 = this.get(0, 1);\n    const b12 = other.get(0, 1);\n    const a21 = this.get(1, 0);\n    const b21 = other.get(1, 0);\n    const a22 = this.get(1, 1);\n    const b22 = other.get(1, 1);\n\n    // Compute intermediate values.\n    const m1 = (a11 + a22) * (b11 + b22);\n    const m2 = (a21 + a22) * b11;\n    const m3 = a11 * (b12 - b22);\n    const m4 = a22 * (b21 - b11);\n    const m5 = (a11 + a12) * b22;\n    const m6 = (a21 - a11) * (b11 + b12);\n    const m7 = (a12 - a22) * (b21 + b22);\n\n    // Combine intermediate values into the output.\n    const c00 = m1 + m4 - m5 + m7;\n    const c01 = m3 + m5;\n    const c10 = m2 + m4;\n    const c11 = m1 - m2 + m3 + m6;\n\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    return result;\n  }\n\n  strassen3x3(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(3, 3);\n\n    const a00 = this.get(0, 0);\n    const a01 = this.get(0, 1);\n    const a02 = this.get(0, 2);\n    const a10 = this.get(1, 0);\n    const a11 = this.get(1, 1);\n    const a12 = this.get(1, 2);\n    const a20 = this.get(2, 0);\n    const a21 = this.get(2, 1);\n    const a22 = this.get(2, 2);\n\n    const b00 = other.get(0, 0);\n    const b01 = other.get(0, 1);\n    const b02 = other.get(0, 2);\n    const b10 = other.get(1, 0);\n    const b11 = other.get(1, 1);\n    const b12 = other.get(1, 2);\n    const b20 = other.get(2, 0);\n    const b21 = other.get(2, 1);\n    const b22 = other.get(2, 2);\n\n    const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;\n    const m2 = (a00 - a10) * (-b01 + b11);\n    const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);\n    const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);\n    const m5 = (a10 + a11) * (-b00 + b01);\n    const m6 = a00 * b00;\n    const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);\n    const m8 = (-a00 + a20) * (b02 - b12);\n    const m9 = (a20 + a21) * (-b00 + b02);\n    const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;\n    const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);\n    const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);\n    const m13 = (a02 - a22) * (b11 - b21);\n    const m14 = a02 * b20;\n    const m15 = (a21 + a22) * (-b20 + b21);\n    const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);\n    const m17 = (a02 - a12) * (b12 - b22);\n    const m18 = (a11 + a12) * (-b20 + b22);\n    const m19 = a01 * b10;\n    const m20 = a12 * b21;\n    const m21 = a10 * b02;\n    const m22 = a20 * b01;\n    const m23 = a22 * b22;\n\n    const c00 = m6 + m14 + m19;\n    const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;\n    const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;\n    const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;\n    const c11 = m2 + m4 + m5 + m6 + m20;\n    const c12 = m14 + m16 + m17 + m18 + m21;\n    const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;\n    const c21 = m12 + m13 + m14 + m15 + m22;\n    const c22 = m6 + m7 + m8 + m9 + m23;\n\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(0, 2, c02);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    result.set(1, 2, c12);\n    result.set(2, 0, c20);\n    result.set(2, 1, c21);\n    result.set(2, 2, c22);\n    return result;\n  }\n\n  mmulStrassen(y) {\n    y = Matrix.checkMatrix(y);\n    let x = this.clone();\n    let r1 = x.rows;\n    let c1 = x.columns;\n    let r2 = y.rows;\n    let c2 = y.columns;\n    if (c1 !== r2) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`,\n      );\n    }\n\n    // Put a matrix into the top left of a matrix of zeros.\n    // `rows` and `cols` are the dimensions of the output matrix.\n    function embed(mat, rows, cols) {\n      let r = mat.rows;\n      let c = mat.columns;\n      if (r === rows && c === cols) {\n        return mat;\n      } else {\n        let resultat = AbstractMatrix.zeros(rows, cols);\n        resultat = resultat.setSubMatrix(mat, 0, 0);\n        return resultat;\n      }\n    }\n\n    // Make sure both matrices are the same size.\n    // This is exclusively for simplicity:\n    // this algorithm can be implemented with matrices of different sizes.\n\n    let r = Math.max(r1, r2);\n    let c = Math.max(c1, c2);\n    x = embed(x, r, c);\n    y = embed(y, r, c);\n\n    // Our recursive multiplication function.\n    function blockMult(a, b, rows, cols) {\n      // For small matrices, resort to naive multiplication.\n      if (rows <= 512 || cols <= 512) {\n        return a.mmul(b); // a is equivalent to this\n      }\n\n      // Apply dynamic padding.\n      if (rows % 2 === 1 && cols % 2 === 1) {\n        a = embed(a, rows + 1, cols + 1);\n        b = embed(b, rows + 1, cols + 1);\n      } else if (rows % 2 === 1) {\n        a = embed(a, rows + 1, cols);\n        b = embed(b, rows + 1, cols);\n      } else if (cols % 2 === 1) {\n        a = embed(a, rows, cols + 1);\n        b = embed(b, rows, cols + 1);\n      }\n\n      let halfRows = parseInt(a.rows / 2, 10);\n      let halfCols = parseInt(a.columns / 2, 10);\n      // Subdivide input matrices.\n      let a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n      let b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n\n      let a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);\n      let b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);\n\n      let a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);\n      let b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);\n\n      let a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);\n      let b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1);\n\n      // Compute intermediate values.\n      let m1 = blockMult(\n        AbstractMatrix.add(a11, a22),\n        AbstractMatrix.add(b11, b22),\n        halfRows,\n        halfCols,\n      );\n      let m2 = blockMult(AbstractMatrix.add(a21, a22), b11, halfRows, halfCols);\n      let m3 = blockMult(a11, AbstractMatrix.sub(b12, b22), halfRows, halfCols);\n      let m4 = blockMult(a22, AbstractMatrix.sub(b21, b11), halfRows, halfCols);\n      let m5 = blockMult(AbstractMatrix.add(a11, a12), b22, halfRows, halfCols);\n      let m6 = blockMult(\n        AbstractMatrix.sub(a21, a11),\n        AbstractMatrix.add(b11, b12),\n        halfRows,\n        halfCols,\n      );\n      let m7 = blockMult(\n        AbstractMatrix.sub(a12, a22),\n        AbstractMatrix.add(b21, b22),\n        halfRows,\n        halfCols,\n      );\n\n      // Combine intermediate values into the output.\n      let c11 = AbstractMatrix.add(m1, m4);\n      c11.sub(m5);\n      c11.add(m7);\n      let c12 = AbstractMatrix.add(m3, m5);\n      let c21 = AbstractMatrix.add(m2, m4);\n      let c22 = AbstractMatrix.sub(m1, m2);\n      c22.add(m3);\n      c22.add(m6);\n\n      // Crop output to the desired size (undo dynamic padding).\n      let result = AbstractMatrix.zeros(2 * c11.rows, 2 * c11.columns);\n      result = result.setSubMatrix(c11, 0, 0);\n      result = result.setSubMatrix(c12, c11.rows, 0);\n      result = result.setSubMatrix(c21, 0, c11.columns);\n      result = result.setSubMatrix(c22, c11.rows, c11.columns);\n      return result.subMatrix(0, rows - 1, 0, cols - 1);\n    }\n\n    return blockMult(x, y, r, c);\n  }\n\n  scaleRows(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1 } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.rows; i++) {\n      const row = this.getRow(i);\n      if (row.length > 0) {\n        rescale(row, { min, max, output: row });\n      }\n      newMatrix.setRow(i, row);\n    }\n    return newMatrix;\n  }\n\n  scaleColumns(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1 } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.columns; i++) {\n      const column = this.getColumn(i);\n      if (column.length) {\n        rescale(column, {\n          min,\n          max,\n          output: column,\n        });\n      }\n      newMatrix.setColumn(i, column);\n    }\n    return newMatrix;\n  }\n\n  flipRows() {\n    const middle = Math.ceil(this.columns / 2);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < middle; j++) {\n        let first = this.get(i, j);\n        let last = this.get(i, this.columns - 1 - j);\n        this.set(i, j, last);\n        this.set(i, this.columns - 1 - j, first);\n      }\n    }\n    return this;\n  }\n\n  flipColumns() {\n    const middle = Math.ceil(this.rows / 2);\n    for (let j = 0; j < this.columns; j++) {\n      for (let i = 0; i < middle; i++) {\n        let first = this.get(i, j);\n        let last = this.get(this.rows - 1 - i, j);\n        this.set(i, j, last);\n        this.set(this.rows - 1 - i, j, first);\n      }\n    }\n    return this;\n  }\n\n  kroneckerProduct(other) {\n    other = Matrix.checkMatrix(other);\n\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.rows;\n    let q = other.columns;\n\n    let result = new Matrix(m * p, n * q);\n    for (let i = 0; i < m; i++) {\n      for (let j = 0; j < n; j++) {\n        for (let k = 0; k < p; k++) {\n          for (let l = 0; l < q; l++) {\n            result.set(p * i + k, q * j + l, this.get(i, j) * other.get(k, l));\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n  kroneckerSum(other) {\n    other = Matrix.checkMatrix(other);\n    if (!this.isSquare() || !other.isSquare()) {\n      throw new Error('Kronecker Sum needs two Square Matrices');\n    }\n    let m = this.rows;\n    let n = other.rows;\n    let AxI = this.kroneckerProduct(Matrix.eye(n, n));\n    let IxB = Matrix.eye(m, m).kroneckerProduct(other);\n    return AxI.add(IxB);\n  }\n\n  transpose() {\n    let result = new Matrix(this.columns, this.rows);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        result.set(j, i, this.get(i, j));\n      }\n    }\n    return result;\n  }\n\n  sortRows(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.rows; i++) {\n      this.setRow(i, this.getRow(i).sort(compareFunction));\n    }\n    return this;\n  }\n\n  sortColumns(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.columns; i++) {\n      this.setColumn(i, this.getColumn(i).sort(compareFunction));\n    }\n    return this;\n  }\n\n  subMatrix(startRow, endRow, startColumn, endColumn) {\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    let newMatrix = new Matrix(\n      endRow - startRow + 1,\n      endColumn - startColumn + 1,\n    );\n    for (let i = startRow; i <= endRow; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        newMatrix.set(i - startRow, j - startColumn, this.get(i, j));\n      }\n    }\n    return newMatrix;\n  }\n\n  subMatrixRow(indices, startColumn, endColumn) {\n    if (startColumn === undefined) startColumn = 0;\n    if (endColumn === undefined) endColumn = this.columns - 1;\n    if (\n      startColumn > endColumn ||\n      startColumn < 0 ||\n      startColumn >= this.columns ||\n      endColumn < 0 ||\n      endColumn >= this.columns\n    ) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(indices.length, endColumn - startColumn + 1);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        if (indices[i] < 0 || indices[i] >= this.rows) {\n          throw new RangeError(`Row index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(i, j - startColumn, this.get(indices[i], j));\n      }\n    }\n    return newMatrix;\n  }\n\n  subMatrixColumn(indices, startRow, endRow) {\n    if (startRow === undefined) startRow = 0;\n    if (endRow === undefined) endRow = this.rows - 1;\n    if (\n      startRow > endRow ||\n      startRow < 0 ||\n      startRow >= this.rows ||\n      endRow < 0 ||\n      endRow >= this.rows\n    ) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(endRow - startRow + 1, indices.length);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startRow; j <= endRow; j++) {\n        if (indices[i] < 0 || indices[i] >= this.columns) {\n          throw new RangeError(`Column index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(j - startRow, i, this.get(j, indices[i]));\n      }\n    }\n    return newMatrix;\n  }\n\n  setSubMatrix(matrix, startRow, startColumn) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (matrix.isEmpty()) {\n      return this;\n    }\n    let endRow = startRow + matrix.rows - 1;\n    let endColumn = startColumn + matrix.columns - 1;\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    for (let i = 0; i < matrix.rows; i++) {\n      for (let j = 0; j < matrix.columns; j++) {\n        this.set(startRow + i, startColumn + j, matrix.get(i, j));\n      }\n    }\n    return this;\n  }\n\n  selection(rowIndices, columnIndices) {\n    checkRowIndices(this, rowIndices);\n    checkColumnIndices(this, columnIndices);\n    let newMatrix = new Matrix(rowIndices.length, columnIndices.length);\n    for (let i = 0; i < rowIndices.length; i++) {\n      let rowIndex = rowIndices[i];\n      for (let j = 0; j < columnIndices.length; j++) {\n        let columnIndex = columnIndices[j];\n        newMatrix.set(i, j, this.get(rowIndex, columnIndex));\n      }\n    }\n    return newMatrix;\n  }\n\n  trace() {\n    let min = Math.min(this.rows, this.columns);\n    let trace = 0;\n    for (let i = 0; i < min; i++) {\n      trace += this.get(i, i);\n    }\n    return trace;\n  }\n\n  clone() {\n    return this.constructor.copy(this, new Matrix(this.rows, this.columns));\n  }\n\n  /**\n   * @template {AbstractMatrix} M\n   * @param {AbstractMatrix} from\n   * @param {M} to\n   * @return {M}\n   */\n  static copy(from, to) {\n    for (const [row, column, value] of from.entries()) {\n      to.set(row, column, value);\n    }\n\n    return to;\n  }\n\n  sum(by) {\n    switch (by) {\n      case 'row':\n        return sumByRow(this);\n      case 'column':\n        return sumByColumn(this);\n      case undefined:\n        return sumAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  product(by) {\n    switch (by) {\n      case 'row':\n        return productByRow(this);\n      case 'column':\n        return productByColumn(this);\n      case undefined:\n        return productAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  mean(by) {\n    const sum = this.sum(by);\n    switch (by) {\n      case 'row': {\n        for (let i = 0; i < this.rows; i++) {\n          sum[i] /= this.columns;\n        }\n        return sum;\n      }\n      case 'column': {\n        for (let i = 0; i < this.columns; i++) {\n          sum[i] /= this.rows;\n        }\n        return sum;\n      }\n      case undefined:\n        return sum / this.size;\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  variance(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { unbiased = true, mean = this.mean(by) } = options;\n    if (typeof unbiased !== 'boolean') {\n      throw new TypeError('unbiased must be a boolean');\n    }\n    switch (by) {\n      case 'row': {\n        if (!isAnyArray.isAnyArray(mean)) {\n          throw new TypeError('mean must be an array');\n        }\n        return varianceByRow(this, unbiased, mean);\n      }\n      case 'column': {\n        if (!isAnyArray.isAnyArray(mean)) {\n          throw new TypeError('mean must be an array');\n        }\n        return varianceByColumn(this, unbiased, mean);\n      }\n      case undefined: {\n        if (typeof mean !== 'number') {\n          throw new TypeError('mean must be a number');\n        }\n        return varianceAll(this, unbiased, mean);\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  standardDeviation(by, options) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    const variance = this.variance(by, options);\n    if (by === undefined) {\n      return Math.sqrt(variance);\n    } else {\n      for (let i = 0; i < variance.length; i++) {\n        variance[i] = Math.sqrt(variance[i]);\n      }\n      return variance;\n    }\n  }\n\n  center(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { center = this.mean(by) } = options;\n    switch (by) {\n      case 'row': {\n        if (!isAnyArray.isAnyArray(center)) {\n          throw new TypeError('center must be an array');\n        }\n        centerByRow(this, center);\n        return this;\n      }\n      case 'column': {\n        if (!isAnyArray.isAnyArray(center)) {\n          throw new TypeError('center must be an array');\n        }\n        centerByColumn(this, center);\n        return this;\n      }\n      case undefined: {\n        if (typeof center !== 'number') {\n          throw new TypeError('center must be a number');\n        }\n        centerAll(this, center);\n        return this;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  scale(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    let scale = options.scale;\n    switch (by) {\n      case 'row': {\n        if (scale === undefined) {\n          scale = getScaleByRow(this);\n        } else if (!isAnyArray.isAnyArray(scale)) {\n          throw new TypeError('scale must be an array');\n        }\n        scaleByRow(this, scale);\n        return this;\n      }\n      case 'column': {\n        if (scale === undefined) {\n          scale = getScaleByColumn(this);\n        } else if (!isAnyArray.isAnyArray(scale)) {\n          throw new TypeError('scale must be an array');\n        }\n        scaleByColumn(this, scale);\n        return this;\n      }\n      case undefined: {\n        if (scale === undefined) {\n          scale = getScaleAll(this);\n        } else if (typeof scale !== 'number') {\n          throw new TypeError('scale must be a number');\n        }\n        scaleAll(this, scale);\n        return this;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  toString(options) {\n    return inspectMatrixWithOptions(this, options);\n  }\n\n  [Symbol.iterator]() {\n    return this.entries();\n  }\n\n  /**\n   * iterator from left to right, from top to bottom\n   * yield [row, column, value]\n   * @returns {Generator<[number, number, number], void, void>}\n   */\n  *entries() {\n    for (let row = 0; row < this.rows; row++) {\n      for (let col = 0; col < this.columns; col++) {\n        yield [row, col, this.get(row, col)];\n      }\n    }\n  }\n\n  /**\n   * iterator from left to right, from top to bottom\n   * yield value\n   * @returns {Generator<number, void, void>}\n   */\n  *values() {\n    for (let row = 0; row < this.rows; row++) {\n      for (let col = 0; col < this.columns; col++) {\n        yield this.get(row, col);\n      }\n    }\n  }\n}\n\nAbstractMatrix.prototype.klass = 'Matrix';\nif (typeof Symbol !== 'undefined') {\n  AbstractMatrix.prototype[Symbol.for('nodejs.util.inspect.custom')] =\n    inspectMatrix;\n}\n\nfunction compareNumbers(a, b) {\n  return a - b;\n}\n\nfunction isArrayOfNumbers(array) {\n  return array.every((element) => {\n    return typeof element === 'number';\n  });\n}\n\n// Synonyms\nAbstractMatrix.random = AbstractMatrix.rand;\nAbstractMatrix.randomInt = AbstractMatrix.randInt;\nAbstractMatrix.diagonal = AbstractMatrix.diag;\nAbstractMatrix.prototype.diagonal = AbstractMatrix.prototype.diag;\nAbstractMatrix.identity = AbstractMatrix.eye;\nAbstractMatrix.prototype.negate = AbstractMatrix.prototype.neg;\nAbstractMatrix.prototype.tensorProduct =\n  AbstractMatrix.prototype.kroneckerProduct;\n\nclass Matrix extends AbstractMatrix {\n  /**\n   * @type {Float64Array[]}\n   */\n  data;\n\n  /**\n   * Init an empty matrix\n   * @param {number} nRows\n   * @param {number} nColumns\n   */\n  #initData(nRows, nColumns) {\n    this.data = [];\n\n    if (Number.isInteger(nColumns) && nColumns >= 0) {\n      for (let i = 0; i < nRows; i++) {\n        this.data.push(new Float64Array(nColumns));\n      }\n    } else {\n      throw new TypeError('nColumns must be a positive integer');\n    }\n\n    this.rows = nRows;\n    this.columns = nColumns;\n  }\n\n  constructor(nRows, nColumns) {\n    super();\n    if (Matrix.isMatrix(nRows)) {\n      this.#initData(nRows.rows, nRows.columns);\n      Matrix.copy(nRows, this);\n    } else if (Number.isInteger(nRows) && nRows >= 0) {\n      this.#initData(nRows, nColumns);\n    } else if (isAnyArray.isAnyArray(nRows)) {\n      // Copy the values from the 2D array\n      const arrayData = nRows;\n      nRows = arrayData.length;\n      nColumns = nRows ? arrayData[0].length : 0;\n      if (typeof nColumns !== 'number') {\n        throw new TypeError(\n          'Data must be a 2D array with at least one element',\n        );\n      }\n      this.data = [];\n\n      for (let i = 0; i < nRows; i++) {\n        if (arrayData[i].length !== nColumns) {\n          throw new RangeError('Inconsistent array dimensions');\n        }\n        if (!isArrayOfNumbers(arrayData[i])) {\n          throw new TypeError('Input data contains non-numeric values');\n        }\n        this.data.push(Float64Array.from(arrayData[i]));\n      }\n\n      this.rows = nRows;\n      this.columns = nColumns;\n    } else {\n      throw new TypeError(\n        'First argument must be a positive number or an array',\n      );\n    }\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n\n  removeRow(index) {\n    checkRowIndex(this, index);\n    this.data.splice(index, 1);\n    this.rows -= 1;\n    return this;\n  }\n\n  addRow(index, array) {\n    if (array === undefined) {\n      array = index;\n      index = this.rows;\n    }\n    checkRowIndex(this, index, true);\n    array = Float64Array.from(checkRowVector(this, array));\n    this.data.splice(index, 0, array);\n    this.rows += 1;\n    return this;\n  }\n\n  removeColumn(index) {\n    checkColumnIndex(this, index);\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns - 1);\n      for (let j = 0; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      for (let j = index + 1; j < this.columns; j++) {\n        newRow[j - 1] = this.data[i][j];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns -= 1;\n    return this;\n  }\n\n  addColumn(index, array) {\n    if (typeof array === 'undefined') {\n      array = index;\n      index = this.columns;\n    }\n    checkColumnIndex(this, index, true);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns + 1);\n      let j = 0;\n      for (; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      newRow[j++] = array[i];\n      for (; j < this.columns + 1; j++) {\n        newRow[j] = this.data[i][j - 1];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns += 1;\n    return this;\n  }\n}\n\ninstallMathOperations(AbstractMatrix, Matrix);\n\n/**\n * @typedef {0 | 1 | number | boolean} Mask\n */\n\nclass SymmetricMatrix extends AbstractMatrix {\n  /** @type {Matrix} */\n  #matrix;\n\n  get size() {\n    return this.#matrix.size;\n  }\n\n  get rows() {\n    return this.#matrix.rows;\n  }\n\n  get columns() {\n    return this.#matrix.columns;\n  }\n\n  get diagonalSize() {\n    return this.rows;\n  }\n\n  /**\n   * not the same as matrix.isSymmetric()\n   * Here is to check if it's instanceof SymmetricMatrix without bundling issues\n   *\n   * @param value\n   * @returns {boolean}\n   */\n  static isSymmetricMatrix(value) {\n    return Matrix.isMatrix(value) && value.klassType === 'SymmetricMatrix';\n  }\n\n  /**\n   * @param diagonalSize\n   * @return {SymmetricMatrix}\n   */\n  static zeros(diagonalSize) {\n    return new this(diagonalSize);\n  }\n\n  /**\n   * @param diagonalSize\n   * @return {SymmetricMatrix}\n   */\n  static ones(diagonalSize) {\n    return new this(diagonalSize).fill(1);\n  }\n\n  /**\n   * @param {number | AbstractMatrix | ArrayLike<ArrayLike<number>>} diagonalSize\n   * @return {this}\n   */\n  constructor(diagonalSize) {\n    super();\n\n    if (Matrix.isMatrix(diagonalSize)) {\n      if (!diagonalSize.isSymmetric()) {\n        throw new TypeError('not symmetric data');\n      }\n\n      this.#matrix = Matrix.copy(\n        diagonalSize,\n        new Matrix(diagonalSize.rows, diagonalSize.rows),\n      );\n    } else if (Number.isInteger(diagonalSize) && diagonalSize >= 0) {\n      this.#matrix = new Matrix(diagonalSize, diagonalSize);\n    } else {\n      this.#matrix = new Matrix(diagonalSize);\n\n      if (!this.isSymmetric()) {\n        throw new TypeError('not symmetric data');\n      }\n    }\n  }\n\n  clone() {\n    const matrix = new SymmetricMatrix(this.diagonalSize);\n\n    for (const [row, col, value] of this.upperRightEntries()) {\n      matrix.set(row, col, value);\n    }\n\n    return matrix;\n  }\n\n  toMatrix() {\n    return new Matrix(this);\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.#matrix.get(rowIndex, columnIndex);\n  }\n  set(rowIndex, columnIndex, value) {\n    // symmetric set\n    this.#matrix.set(rowIndex, columnIndex, value);\n    this.#matrix.set(columnIndex, rowIndex, value);\n\n    return this;\n  }\n\n  removeCross(index) {\n    // symmetric remove side\n    this.#matrix.removeRow(index);\n    this.#matrix.removeColumn(index);\n\n    return this;\n  }\n\n  addCross(index, array) {\n    if (array === undefined) {\n      array = index;\n      index = this.diagonalSize;\n    }\n\n    const row = array.slice();\n    row.splice(index, 1);\n\n    this.#matrix.addRow(index, row);\n    this.#matrix.addColumn(index, array);\n\n    return this;\n  }\n\n  /**\n   * @param {Mask[]} mask\n   */\n  applyMask(mask) {\n    if (mask.length !== this.diagonalSize) {\n      throw new RangeError('Mask size do not match with matrix size');\n    }\n\n    // prepare sides to remove from matrix from mask\n    /** @type {number[]} */\n    const sidesToRemove = [];\n    for (const [index, passthroughs] of mask.entries()) {\n      if (passthroughs) continue;\n      sidesToRemove.push(index);\n    }\n    // to remove from highest to lowest for no mutation shifting\n    sidesToRemove.reverse();\n\n    // remove sides\n    for (const sideIndex of sidesToRemove) {\n      this.removeCross(sideIndex);\n    }\n\n    return this;\n  }\n\n  /**\n   * Compact format upper-right corner of matrix\n   * iterate from left to right, from top to bottom.\n   *\n   * ```\n   *   A B C D\n   * A 1 2 3 4\n   * B 2 5 6 7\n   * C 3 6 8 9\n   * D 4 7 9 10\n   * ```\n   *\n   * will return compact 1D array `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]`\n   *\n   * length is S(i=0, n=sideSize) => 10 for a 4 sideSized matrix\n   *\n   * @returns {number[]}\n   */\n  toCompact() {\n    const { diagonalSize } = this;\n\n    /** @type {number[]} */\n    const compact = new Array((diagonalSize * (diagonalSize + 1)) / 2);\n    for (let col = 0, row = 0, index = 0; index < compact.length; index++) {\n      compact[index] = this.get(row, col);\n\n      if (++col >= diagonalSize) col = ++row;\n    }\n\n    return compact;\n  }\n\n  /**\n   * @param {number[]} compact\n   * @return {SymmetricMatrix}\n   */\n  static fromCompact(compact) {\n    const compactSize = compact.length;\n    // compactSize = (sideSize * (sideSize + 1)) / 2\n    // https://mathsolver.microsoft.com/fr/solve-problem/y%20%3D%20%20x%20%60cdot%20%20%20%60frac%7B%20%20%60left(%20x%2B1%20%20%60right)%20%20%20%20%7D%7B%202%20%20%7D\n    // sideSize = (Sqrt(8 × compactSize + 1) - 1) / 2\n    const diagonalSize = (Math.sqrt(8 * compactSize + 1) - 1) / 2;\n\n    if (!Number.isInteger(diagonalSize)) {\n      throw new TypeError(\n        `This array is not a compact representation of a Symmetric Matrix, ${JSON.stringify(\n          compact,\n        )}`,\n      );\n    }\n\n    const matrix = new SymmetricMatrix(diagonalSize);\n    for (let col = 0, row = 0, index = 0; index < compactSize; index++) {\n      matrix.set(col, row, compact[index]);\n      if (++col >= diagonalSize) col = ++row;\n    }\n\n    return matrix;\n  }\n\n  /**\n   * half iterator upper-right-corner from left to right, from top to bottom\n   * yield [row, column, value]\n   *\n   * @returns {Generator<[number, number, number], void, void>}\n   */\n  *upperRightEntries() {\n    for (let row = 0, col = 0; row < this.diagonalSize; void 0) {\n      const value = this.get(row, col);\n\n      yield [row, col, value];\n\n      // at the end of row, move cursor to next row at diagonal position\n      if (++col >= this.diagonalSize) col = ++row;\n    }\n  }\n\n  /**\n   * half iterator upper-right-corner from left to right, from top to bottom\n   * yield value\n   *\n   * @returns {Generator<[number, number, number], void, void>}\n   */\n  *upperRightValues() {\n    for (let row = 0, col = 0; row < this.diagonalSize; void 0) {\n      const value = this.get(row, col);\n\n      yield value;\n\n      // at the end of row, move cursor to next row at diagonal position\n      if (++col >= this.diagonalSize) col = ++row;\n    }\n  }\n}\nSymmetricMatrix.prototype.klassType = 'SymmetricMatrix';\n\nclass DistanceMatrix extends SymmetricMatrix {\n  /**\n   * not the same as matrix.isSymmetric()\n   * Here is to check if it's instanceof SymmetricMatrix without bundling issues\n   *\n   * @param value\n   * @returns {boolean}\n   */\n  static isDistanceMatrix(value) {\n    return (\n      SymmetricMatrix.isSymmetricMatrix(value) &&\n      value.klassSubType === 'DistanceMatrix'\n    );\n  }\n\n  constructor(sideSize) {\n    super(sideSize);\n\n    if (!this.isDistance()) {\n      throw new TypeError('Provided arguments do no produce a distance matrix');\n    }\n  }\n\n  set(rowIndex, columnIndex, value) {\n    // distance matrix diagonal is 0\n    if (rowIndex === columnIndex) value = 0;\n\n    return super.set(rowIndex, columnIndex, value);\n  }\n\n  addCross(index, array) {\n    if (array === undefined) {\n      array = index;\n      index = this.diagonalSize;\n    }\n\n    // ensure distance\n    array = array.slice();\n    array[index] = 0;\n\n    return super.addCross(index, array);\n  }\n\n  toSymmetricMatrix() {\n    return new SymmetricMatrix(this);\n  }\n\n  clone() {\n    const matrix = new DistanceMatrix(this.diagonalSize);\n\n    for (const [row, col, value] of this.upperRightEntries()) {\n      if (row === col) continue;\n      matrix.set(row, col, value);\n    }\n\n    return matrix;\n  }\n\n  /**\n   * Compact format upper-right corner of matrix\n   * no diagonal (only zeros)\n   * iterable from left to right, from top to bottom.\n   *\n   * ```\n   *   A B C D\n   * A 0 1 2 3\n   * B 1 0 4 5\n   * C 2 4 0 6\n   * D 3 5 6 0\n   * ```\n   *\n   * will return compact 1D array `[1, 2, 3, 4, 5, 6]`\n   *\n   * length is S(i=0, n=sideSize-1) => 6 for a 4 side sized matrix\n   *\n   * @returns {number[]}\n   */\n  toCompact() {\n    const { diagonalSize } = this;\n    const compactLength = ((diagonalSize - 1) * diagonalSize) / 2;\n\n    /** @type {number[]} */\n    const compact = new Array(compactLength);\n    for (let col = 1, row = 0, index = 0; index < compact.length; index++) {\n      compact[index] = this.get(row, col);\n\n      if (++col >= diagonalSize) col = ++row + 1;\n    }\n\n    return compact;\n  }\n\n  /**\n   * @param {number[]} compact\n   */\n  static fromCompact(compact) {\n    const compactSize = compact.length;\n\n    if (compactSize === 0) {\n      return new this(0);\n    }\n\n    // compactSize in Natural integer range ]0;∞]\n    // compactSize = (sideSize * (sideSize - 1)) / 2\n    // sideSize = (Sqrt(8 × compactSize + 1) + 1) / 2\n    const diagonalSize = (Math.sqrt(8 * compactSize + 1) + 1) / 2;\n\n    if (!Number.isInteger(diagonalSize)) {\n      throw new TypeError(\n        `This array is not a compact representation of a DistanceMatrix, ${JSON.stringify(\n          compact,\n        )}`,\n      );\n    }\n\n    const matrix = new this(diagonalSize);\n    for (let col = 1, row = 0, index = 0; index < compactSize; index++) {\n      matrix.set(col, row, compact[index]);\n      if (++col >= diagonalSize) col = ++row + 1;\n    }\n\n    return matrix;\n  }\n}\nDistanceMatrix.prototype.klassSubType = 'DistanceMatrix';\n\nclass BaseView extends AbstractMatrix {\n  constructor(matrix, rows, columns) {\n    super();\n    this.matrix = matrix;\n    this.rows = rows;\n    this.columns = columns;\n  }\n}\n\nclass MatrixColumnView extends BaseView {\n  constructor(matrix, column) {\n    checkColumnIndex(matrix, column);\n    super(matrix, matrix.rows, 1);\n    this.column = column;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(rowIndex, this.column, value);\n    return this;\n  }\n\n  get(rowIndex) {\n    return this.matrix.get(rowIndex, this.column);\n  }\n}\n\nclass MatrixColumnSelectionView extends BaseView {\n  constructor(matrix, columnIndices) {\n    checkColumnIndices(matrix, columnIndices);\n    super(matrix, matrix.rows, columnIndices.length);\n    this.columnIndices = columnIndices;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(rowIndex, this.columnIndices[columnIndex], value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(rowIndex, this.columnIndices[columnIndex]);\n  }\n}\n\nclass MatrixFlipColumnView extends BaseView {\n  constructor(matrix) {\n    super(matrix, matrix.rows, matrix.columns);\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(rowIndex, this.columns - columnIndex - 1, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(rowIndex, this.columns - columnIndex - 1);\n  }\n}\n\nclass MatrixFlipRowView extends BaseView {\n  constructor(matrix) {\n    super(matrix, matrix.rows, matrix.columns);\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(this.rows - rowIndex - 1, columnIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(this.rows - rowIndex - 1, columnIndex);\n  }\n}\n\nclass MatrixRowView extends BaseView {\n  constructor(matrix, row) {\n    checkRowIndex(matrix, row);\n    super(matrix, 1, matrix.columns);\n    this.row = row;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(this.row, columnIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(this.row, columnIndex);\n  }\n}\n\nclass MatrixRowSelectionView extends BaseView {\n  constructor(matrix, rowIndices) {\n    checkRowIndices(matrix, rowIndices);\n    super(matrix, rowIndices.length, matrix.columns);\n    this.rowIndices = rowIndices;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(this.rowIndices[rowIndex], columnIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(this.rowIndices[rowIndex], columnIndex);\n  }\n}\n\nclass MatrixSelectionView extends BaseView {\n  constructor(matrix, rowIndices, columnIndices) {\n    checkRowIndices(matrix, rowIndices);\n    checkColumnIndices(matrix, columnIndices);\n    super(matrix, rowIndices.length, columnIndices.length);\n    this.rowIndices = rowIndices;\n    this.columnIndices = columnIndices;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(\n      this.rowIndices[rowIndex],\n      this.columnIndices[columnIndex],\n      value,\n    );\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(\n      this.rowIndices[rowIndex],\n      this.columnIndices[columnIndex],\n    );\n  }\n}\n\nclass MatrixSubView extends BaseView {\n  constructor(matrix, startRow, endRow, startColumn, endColumn) {\n    checkRange(matrix, startRow, endRow, startColumn, endColumn);\n    super(matrix, endRow - startRow + 1, endColumn - startColumn + 1);\n    this.startRow = startRow;\n    this.startColumn = startColumn;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(\n      this.startRow + rowIndex,\n      this.startColumn + columnIndex,\n      value,\n    );\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(\n      this.startRow + rowIndex,\n      this.startColumn + columnIndex,\n    );\n  }\n}\n\nclass MatrixTransposeView extends BaseView {\n  constructor(matrix) {\n    super(matrix, matrix.columns, matrix.rows);\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(columnIndex, rowIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(columnIndex, rowIndex);\n  }\n}\n\nclass WrapperMatrix1D extends AbstractMatrix {\n  constructor(data, options = {}) {\n    const { rows = 1 } = options;\n\n    if (data.length % rows !== 0) {\n      throw new Error('the data length is not divisible by the number of rows');\n    }\n    super();\n    this.rows = rows;\n    this.columns = data.length / rows;\n    this.data = data;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    let index = this._calculateIndex(rowIndex, columnIndex);\n    this.data[index] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    let index = this._calculateIndex(rowIndex, columnIndex);\n    return this.data[index];\n  }\n\n  _calculateIndex(row, column) {\n    return row * this.columns + column;\n  }\n}\n\nclass WrapperMatrix2D extends AbstractMatrix {\n  constructor(data) {\n    super();\n    this.data = data;\n    this.rows = data.length;\n    this.columns = data[0].length;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n}\n\nfunction wrap(array, options) {\n  if (isAnyArray.isAnyArray(array)) {\n    if (array[0] && isAnyArray.isAnyArray(array[0])) {\n      return new WrapperMatrix2D(array);\n    } else {\n      return new WrapperMatrix1D(array, options);\n    }\n  } else {\n    throw new Error('the argument is not an array');\n  }\n}\n\nclass LuDecomposition {\n  constructor(matrix) {\n    matrix = WrapperMatrix2D.checkMatrix(matrix);\n\n    let lu = matrix.clone();\n    let rows = lu.rows;\n    let columns = lu.columns;\n    let pivotVector = new Float64Array(rows);\n    let pivotSign = 1;\n    let i, j, k, p, s, t, v;\n    let LUcolj, kmax;\n\n    for (i = 0; i < rows; i++) {\n      pivotVector[i] = i;\n    }\n\n    LUcolj = new Float64Array(rows);\n\n    for (j = 0; j < columns; j++) {\n      for (i = 0; i < rows; i++) {\n        LUcolj[i] = lu.get(i, j);\n      }\n\n      for (i = 0; i < rows; i++) {\n        kmax = Math.min(i, j);\n        s = 0;\n        for (k = 0; k < kmax; k++) {\n          s += lu.get(i, k) * LUcolj[k];\n        }\n        LUcolj[i] -= s;\n        lu.set(i, j, LUcolj[i]);\n      }\n\n      p = j;\n      for (i = j + 1; i < rows; i++) {\n        if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n          p = i;\n        }\n      }\n\n      if (p !== j) {\n        for (k = 0; k < columns; k++) {\n          t = lu.get(p, k);\n          lu.set(p, k, lu.get(j, k));\n          lu.set(j, k, t);\n        }\n\n        v = pivotVector[p];\n        pivotVector[p] = pivotVector[j];\n        pivotVector[j] = v;\n\n        pivotSign = -pivotSign;\n      }\n\n      if (j < rows && lu.get(j, j) !== 0) {\n        for (i = j + 1; i < rows; i++) {\n          lu.set(i, j, lu.get(i, j) / lu.get(j, j));\n        }\n      }\n    }\n\n    this.LU = lu;\n    this.pivotVector = pivotVector;\n    this.pivotSign = pivotSign;\n  }\n\n  isSingular() {\n    let data = this.LU;\n    let col = data.columns;\n    for (let j = 0; j < col; j++) {\n      if (data.get(j, j) === 0) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  solve(value) {\n    value = Matrix.checkMatrix(value);\n\n    let lu = this.LU;\n    let rows = lu.rows;\n\n    if (rows !== value.rows) {\n      throw new Error('Invalid matrix dimensions');\n    }\n    if (this.isSingular()) {\n      throw new Error('LU matrix is singular');\n    }\n\n    let count = value.columns;\n    let X = value.subMatrixRow(this.pivotVector, 0, count - 1);\n    let columns = lu.columns;\n    let i, j, k;\n\n    for (k = 0; k < columns; k++) {\n      for (i = k + 1; i < columns; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * lu.get(i, k));\n        }\n      }\n    }\n    for (k = columns - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        X.set(k, j, X.get(k, j) / lu.get(k, k));\n      }\n      for (i = 0; i < k; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * lu.get(i, k));\n        }\n      }\n    }\n    return X;\n  }\n\n  get determinant() {\n    let data = this.LU;\n    if (!data.isSquare()) {\n      throw new Error('Matrix must be square');\n    }\n    let determinant = this.pivotSign;\n    let col = data.columns;\n    for (let j = 0; j < col; j++) {\n      determinant *= data.get(j, j);\n    }\n    return determinant;\n  }\n\n  get lowerTriangularMatrix() {\n    let data = this.LU;\n    let rows = data.rows;\n    let columns = data.columns;\n    let X = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        if (i > j) {\n          X.set(i, j, data.get(i, j));\n        } else if (i === j) {\n          X.set(i, j, 1);\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get upperTriangularMatrix() {\n    let data = this.LU;\n    let rows = data.rows;\n    let columns = data.columns;\n    let X = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        if (i <= j) {\n          X.set(i, j, data.get(i, j));\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get pivotPermutationVector() {\n    return Array.from(this.pivotVector);\n  }\n}\n\nfunction hypotenuse(a, b) {\n  let r = 0;\n  if (Math.abs(a) > Math.abs(b)) {\n    r = b / a;\n    return Math.abs(a) * Math.sqrt(1 + r * r);\n  }\n  if (b !== 0) {\n    r = a / b;\n    return Math.abs(b) * Math.sqrt(1 + r * r);\n  }\n  return 0;\n}\n\nclass QrDecomposition {\n  constructor(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    let qr = value.clone();\n    let m = value.rows;\n    let n = value.columns;\n    let rdiag = new Float64Array(n);\n    let i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n      let nrm = 0;\n      for (i = k; i < m; i++) {\n        nrm = hypotenuse(nrm, qr.get(i, k));\n      }\n      if (nrm !== 0) {\n        if (qr.get(k, k) < 0) {\n          nrm = -nrm;\n        }\n        for (i = k; i < m; i++) {\n          qr.set(i, k, qr.get(i, k) / nrm);\n        }\n        qr.set(k, k, qr.get(k, k) + 1);\n        for (j = k + 1; j < n; j++) {\n          s = 0;\n          for (i = k; i < m; i++) {\n            s += qr.get(i, k) * qr.get(i, j);\n          }\n          s = -s / qr.get(k, k);\n          for (i = k; i < m; i++) {\n            qr.set(i, j, qr.get(i, j) + s * qr.get(i, k));\n          }\n        }\n      }\n      rdiag[k] = -nrm;\n    }\n\n    this.QR = qr;\n    this.Rdiag = rdiag;\n  }\n\n  solve(value) {\n    value = Matrix.checkMatrix(value);\n\n    let qr = this.QR;\n    let m = qr.rows;\n\n    if (value.rows !== m) {\n      throw new Error('Matrix row dimensions must agree');\n    }\n    if (!this.isFullRank()) {\n      throw new Error('Matrix is rank deficient');\n    }\n\n    let count = value.columns;\n    let X = value.clone();\n    let n = qr.columns;\n    let i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n      for (j = 0; j < count; j++) {\n        s = 0;\n        for (i = k; i < m; i++) {\n          s += qr.get(i, k) * X.get(i, j);\n        }\n        s = -s / qr.get(k, k);\n        for (i = k; i < m; i++) {\n          X.set(i, j, X.get(i, j) + s * qr.get(i, k));\n        }\n      }\n    }\n    for (k = n - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        X.set(k, j, X.get(k, j) / this.Rdiag[k]);\n      }\n      for (i = 0; i < k; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * qr.get(i, k));\n        }\n      }\n    }\n\n    return X.subMatrix(0, n - 1, 0, count - 1);\n  }\n\n  isFullRank() {\n    let columns = this.QR.columns;\n    for (let i = 0; i < columns; i++) {\n      if (this.Rdiag[i] === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  get upperTriangularMatrix() {\n    let qr = this.QR;\n    let n = qr.columns;\n    let X = new Matrix(n, n);\n    let i, j;\n    for (i = 0; i < n; i++) {\n      for (j = 0; j < n; j++) {\n        if (i < j) {\n          X.set(i, j, qr.get(i, j));\n        } else if (i === j) {\n          X.set(i, j, this.Rdiag[i]);\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get orthogonalMatrix() {\n    let qr = this.QR;\n    let rows = qr.rows;\n    let columns = qr.columns;\n    let X = new Matrix(rows, columns);\n    let i, j, k, s;\n\n    for (k = columns - 1; k >= 0; k--) {\n      for (i = 0; i < rows; i++) {\n        X.set(i, k, 0);\n      }\n      X.set(k, k, 1);\n      for (j = k; j < columns; j++) {\n        if (qr.get(k, k) !== 0) {\n          s = 0;\n          for (i = k; i < rows; i++) {\n            s += qr.get(i, k) * X.get(i, j);\n          }\n\n          s = -s / qr.get(k, k);\n\n          for (i = k; i < rows; i++) {\n            X.set(i, j, X.get(i, j) + s * qr.get(i, k));\n          }\n        }\n      }\n    }\n    return X;\n  }\n}\n\nclass SingularValueDecomposition {\n  constructor(value, options = {}) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    if (value.isEmpty()) {\n      throw new Error('Matrix must be non-empty');\n    }\n\n    let m = value.rows;\n    let n = value.columns;\n\n    const {\n      computeLeftSingularVectors = true,\n      computeRightSingularVectors = true,\n      autoTranspose = false,\n    } = options;\n\n    let wantu = Boolean(computeLeftSingularVectors);\n    let wantv = Boolean(computeRightSingularVectors);\n\n    let swapped = false;\n    let a;\n    if (m < n) {\n      if (!autoTranspose) {\n        a = value.clone();\n        // eslint-disable-next-line no-console\n        console.warn(\n          'Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose',\n        );\n      } else {\n        a = value.transpose();\n        m = a.rows;\n        n = a.columns;\n        swapped = true;\n        let aux = wantu;\n        wantu = wantv;\n        wantv = aux;\n      }\n    } else {\n      a = value.clone();\n    }\n\n    let nu = Math.min(m, n);\n    let ni = Math.min(m + 1, n);\n    let s = new Float64Array(ni);\n    let U = new Matrix(m, nu);\n    let V = new Matrix(n, n);\n\n    let e = new Float64Array(n);\n    let work = new Float64Array(m);\n\n    let si = new Float64Array(ni);\n    for (let i = 0; i < ni; i++) si[i] = i;\n\n    let nct = Math.min(m - 1, n);\n    let nrt = Math.max(0, Math.min(n - 2, m));\n    let mrc = Math.max(nct, nrt);\n\n    for (let k = 0; k < mrc; k++) {\n      if (k < nct) {\n        s[k] = 0;\n        for (let i = k; i < m; i++) {\n          s[k] = hypotenuse(s[k], a.get(i, k));\n        }\n        if (s[k] !== 0) {\n          if (a.get(k, k) < 0) {\n            s[k] = -s[k];\n          }\n          for (let i = k; i < m; i++) {\n            a.set(i, k, a.get(i, k) / s[k]);\n          }\n          a.set(k, k, a.get(k, k) + 1);\n        }\n        s[k] = -s[k];\n      }\n\n      for (let j = k + 1; j < n; j++) {\n        if (k < nct && s[k] !== 0) {\n          let t = 0;\n          for (let i = k; i < m; i++) {\n            t += a.get(i, k) * a.get(i, j);\n          }\n          t = -t / a.get(k, k);\n          for (let i = k; i < m; i++) {\n            a.set(i, j, a.get(i, j) + t * a.get(i, k));\n          }\n        }\n        e[j] = a.get(k, j);\n      }\n\n      if (wantu && k < nct) {\n        for (let i = k; i < m; i++) {\n          U.set(i, k, a.get(i, k));\n        }\n      }\n\n      if (k < nrt) {\n        e[k] = 0;\n        for (let i = k + 1; i < n; i++) {\n          e[k] = hypotenuse(e[k], e[i]);\n        }\n        if (e[k] !== 0) {\n          if (e[k + 1] < 0) {\n            e[k] = 0 - e[k];\n          }\n          for (let i = k + 1; i < n; i++) {\n            e[i] /= e[k];\n          }\n          e[k + 1] += 1;\n        }\n        e[k] = -e[k];\n        if (k + 1 < m && e[k] !== 0) {\n          for (let i = k + 1; i < m; i++) {\n            work[i] = 0;\n          }\n          for (let i = k + 1; i < m; i++) {\n            for (let j = k + 1; j < n; j++) {\n              work[i] += e[j] * a.get(i, j);\n            }\n          }\n          for (let j = k + 1; j < n; j++) {\n            let t = -e[j] / e[k + 1];\n            for (let i = k + 1; i < m; i++) {\n              a.set(i, j, a.get(i, j) + t * work[i]);\n            }\n          }\n        }\n        if (wantv) {\n          for (let i = k + 1; i < n; i++) {\n            V.set(i, k, e[i]);\n          }\n        }\n      }\n    }\n\n    let p = Math.min(n, m + 1);\n    if (nct < n) {\n      s[nct] = a.get(nct, nct);\n    }\n    if (m < p) {\n      s[p - 1] = 0;\n    }\n    if (nrt + 1 < p) {\n      e[nrt] = a.get(nrt, p - 1);\n    }\n    e[p - 1] = 0;\n\n    if (wantu) {\n      for (let j = nct; j < nu; j++) {\n        for (let i = 0; i < m; i++) {\n          U.set(i, j, 0);\n        }\n        U.set(j, j, 1);\n      }\n      for (let k = nct - 1; k >= 0; k--) {\n        if (s[k] !== 0) {\n          for (let j = k + 1; j < nu; j++) {\n            let t = 0;\n            for (let i = k; i < m; i++) {\n              t += U.get(i, k) * U.get(i, j);\n            }\n            t = -t / U.get(k, k);\n            for (let i = k; i < m; i++) {\n              U.set(i, j, U.get(i, j) + t * U.get(i, k));\n            }\n          }\n          for (let i = k; i < m; i++) {\n            U.set(i, k, -U.get(i, k));\n          }\n          U.set(k, k, 1 + U.get(k, k));\n          for (let i = 0; i < k - 1; i++) {\n            U.set(i, k, 0);\n          }\n        } else {\n          for (let i = 0; i < m; i++) {\n            U.set(i, k, 0);\n          }\n          U.set(k, k, 1);\n        }\n      }\n    }\n\n    if (wantv) {\n      for (let k = n - 1; k >= 0; k--) {\n        if (k < nrt && e[k] !== 0) {\n          for (let j = k + 1; j < n; j++) {\n            let t = 0;\n            for (let i = k + 1; i < n; i++) {\n              t += V.get(i, k) * V.get(i, j);\n            }\n            t = -t / V.get(k + 1, k);\n            for (let i = k + 1; i < n; i++) {\n              V.set(i, j, V.get(i, j) + t * V.get(i, k));\n            }\n          }\n        }\n        for (let i = 0; i < n; i++) {\n          V.set(i, k, 0);\n        }\n        V.set(k, k, 1);\n      }\n    }\n\n    let pp = p - 1;\n    let eps = Number.EPSILON;\n    while (p > 0) {\n      let k, kase;\n      for (k = p - 2; k >= -1; k--) {\n        if (k === -1) {\n          break;\n        }\n        const alpha =\n          Number.MIN_VALUE + eps * Math.abs(s[k] + Math.abs(s[k + 1]));\n        if (Math.abs(e[k]) <= alpha || Number.isNaN(e[k])) {\n          e[k] = 0;\n          break;\n        }\n      }\n      if (k === p - 2) {\n        kase = 4;\n      } else {\n        let ks;\n        for (ks = p - 1; ks >= k; ks--) {\n          if (ks === k) {\n            break;\n          }\n          let t =\n            (ks !== p ? Math.abs(e[ks]) : 0) +\n            (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n          if (Math.abs(s[ks]) <= eps * t) {\n            s[ks] = 0;\n            break;\n          }\n        }\n        if (ks === k) {\n          kase = 3;\n        } else if (ks === p - 1) {\n          kase = 1;\n        } else {\n          kase = 2;\n          k = ks;\n        }\n      }\n\n      k++;\n\n      switch (kase) {\n        case 1: {\n          let f = e[p - 2];\n          e[p - 2] = 0;\n          for (let j = p - 2; j >= k; j--) {\n            let t = hypotenuse(s[j], f);\n            let cs = s[j] / t;\n            let sn = f / t;\n            s[j] = t;\n            if (j !== k) {\n              f = -sn * e[j - 1];\n              e[j - 1] = cs * e[j - 1];\n            }\n            if (wantv) {\n              for (let i = 0; i < n; i++) {\n                t = cs * V.get(i, j) + sn * V.get(i, p - 1);\n                V.set(i, p - 1, -sn * V.get(i, j) + cs * V.get(i, p - 1));\n                V.set(i, j, t);\n              }\n            }\n          }\n          break;\n        }\n        case 2: {\n          let f = e[k - 1];\n          e[k - 1] = 0;\n          for (let j = k; j < p; j++) {\n            let t = hypotenuse(s[j], f);\n            let cs = s[j] / t;\n            let sn = f / t;\n            s[j] = t;\n            f = -sn * e[j];\n            e[j] = cs * e[j];\n            if (wantu) {\n              for (let i = 0; i < m; i++) {\n                t = cs * U.get(i, j) + sn * U.get(i, k - 1);\n                U.set(i, k - 1, -sn * U.get(i, j) + cs * U.get(i, k - 1));\n                U.set(i, j, t);\n              }\n            }\n          }\n          break;\n        }\n        case 3: {\n          const scale = Math.max(\n            Math.abs(s[p - 1]),\n            Math.abs(s[p - 2]),\n            Math.abs(e[p - 2]),\n            Math.abs(s[k]),\n            Math.abs(e[k]),\n          );\n          const sp = s[p - 1] / scale;\n          const spm1 = s[p - 2] / scale;\n          const epm1 = e[p - 2] / scale;\n          const sk = s[k] / scale;\n          const ek = e[k] / scale;\n          const b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n          const c = sp * epm1 * (sp * epm1);\n          let shift = 0;\n          if (b !== 0 || c !== 0) {\n            if (b < 0) {\n              shift = 0 - Math.sqrt(b * b + c);\n            } else {\n              shift = Math.sqrt(b * b + c);\n            }\n            shift = c / (b + shift);\n          }\n          let f = (sk + sp) * (sk - sp) + shift;\n          let g = sk * ek;\n          for (let j = k; j < p - 1; j++) {\n            let t = hypotenuse(f, g);\n            if (t === 0) t = Number.MIN_VALUE;\n            let cs = f / t;\n            let sn = g / t;\n            if (j !== k) {\n              e[j - 1] = t;\n            }\n            f = cs * s[j] + sn * e[j];\n            e[j] = cs * e[j] - sn * s[j];\n            g = sn * s[j + 1];\n            s[j + 1] = cs * s[j + 1];\n            if (wantv) {\n              for (let i = 0; i < n; i++) {\n                t = cs * V.get(i, j) + sn * V.get(i, j + 1);\n                V.set(i, j + 1, -sn * V.get(i, j) + cs * V.get(i, j + 1));\n                V.set(i, j, t);\n              }\n            }\n            t = hypotenuse(f, g);\n            if (t === 0) t = Number.MIN_VALUE;\n            cs = f / t;\n            sn = g / t;\n            s[j] = t;\n            f = cs * e[j] + sn * s[j + 1];\n            s[j + 1] = -sn * e[j] + cs * s[j + 1];\n            g = sn * e[j + 1];\n            e[j + 1] = cs * e[j + 1];\n            if (wantu && j < m - 1) {\n              for (let i = 0; i < m; i++) {\n                t = cs * U.get(i, j) + sn * U.get(i, j + 1);\n                U.set(i, j + 1, -sn * U.get(i, j) + cs * U.get(i, j + 1));\n                U.set(i, j, t);\n              }\n            }\n          }\n          e[p - 2] = f;\n          break;\n        }\n        case 4: {\n          if (s[k] <= 0) {\n            s[k] = s[k] < 0 ? -s[k] : 0;\n            if (wantv) {\n              for (let i = 0; i <= pp; i++) {\n                V.set(i, k, -V.get(i, k));\n              }\n            }\n          }\n          while (k < pp) {\n            if (s[k] >= s[k + 1]) {\n              break;\n            }\n            let t = s[k];\n            s[k] = s[k + 1];\n            s[k + 1] = t;\n            if (wantv && k < n - 1) {\n              for (let i = 0; i < n; i++) {\n                t = V.get(i, k + 1);\n                V.set(i, k + 1, V.get(i, k));\n                V.set(i, k, t);\n              }\n            }\n            if (wantu && k < m - 1) {\n              for (let i = 0; i < m; i++) {\n                t = U.get(i, k + 1);\n                U.set(i, k + 1, U.get(i, k));\n                U.set(i, k, t);\n              }\n            }\n            k++;\n          }\n          p--;\n          break;\n        }\n        // no default\n      }\n    }\n\n    if (swapped) {\n      let tmp = V;\n      V = U;\n      U = tmp;\n    }\n\n    this.m = m;\n    this.n = n;\n    this.s = s;\n    this.U = U;\n    this.V = V;\n  }\n\n  solve(value) {\n    let Y = value;\n    let e = this.threshold;\n    let scols = this.s.length;\n    let Ls = Matrix.zeros(scols, scols);\n\n    for (let i = 0; i < scols; i++) {\n      if (Math.abs(this.s[i]) <= e) {\n        Ls.set(i, i, 0);\n      } else {\n        Ls.set(i, i, 1 / this.s[i]);\n      }\n    }\n\n    let U = this.U;\n    let V = this.rightSingularVectors;\n\n    let VL = V.mmul(Ls);\n    let vrows = V.rows;\n    let urows = U.rows;\n    let VLU = Matrix.zeros(vrows, urows);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < urows; j++) {\n        let sum = 0;\n        for (let k = 0; k < scols; k++) {\n          sum += VL.get(i, k) * U.get(j, k);\n        }\n        VLU.set(i, j, sum);\n      }\n    }\n\n    return VLU.mmul(Y);\n  }\n\n  solveForDiagonal(value) {\n    return this.solve(Matrix.diag(value));\n  }\n\n  inverse() {\n    let V = this.V;\n    let e = this.threshold;\n    let vrows = V.rows;\n    let vcols = V.columns;\n    let X = new Matrix(vrows, this.s.length);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < vcols; j++) {\n        if (Math.abs(this.s[j]) > e) {\n          X.set(i, j, V.get(i, j) / this.s[j]);\n        }\n      }\n    }\n\n    let U = this.U;\n\n    let urows = U.rows;\n    let ucols = U.columns;\n    let Y = new Matrix(vrows, urows);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < urows; j++) {\n        let sum = 0;\n        for (let k = 0; k < ucols; k++) {\n          sum += X.get(i, k) * U.get(j, k);\n        }\n        Y.set(i, j, sum);\n      }\n    }\n\n    return Y;\n  }\n\n  get condition() {\n    return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n  }\n\n  get norm2() {\n    return this.s[0];\n  }\n\n  get rank() {\n    let tol = Math.max(this.m, this.n) * this.s[0] * Number.EPSILON;\n    let r = 0;\n    let s = this.s;\n    for (let i = 0, ii = s.length; i < ii; i++) {\n      if (s[i] > tol) {\n        r++;\n      }\n    }\n    return r;\n  }\n\n  get diagonal() {\n    return Array.from(this.s);\n  }\n\n  get threshold() {\n    return (Number.EPSILON / 2) * Math.max(this.m, this.n) * this.s[0];\n  }\n\n  get leftSingularVectors() {\n    return this.U;\n  }\n\n  get rightSingularVectors() {\n    return this.V;\n  }\n\n  get diagonalMatrix() {\n    return Matrix.diag(this.s);\n  }\n}\n\nfunction inverse(matrix, useSVD = false) {\n  matrix = WrapperMatrix2D.checkMatrix(matrix);\n  if (useSVD) {\n    return new SingularValueDecomposition(matrix).inverse();\n  } else {\n    return solve(matrix, Matrix.eye(matrix.rows));\n  }\n}\n\nfunction solve(leftHandSide, rightHandSide, useSVD = false) {\n  leftHandSide = WrapperMatrix2D.checkMatrix(leftHandSide);\n  rightHandSide = WrapperMatrix2D.checkMatrix(rightHandSide);\n  if (useSVD) {\n    return new SingularValueDecomposition(leftHandSide).solve(rightHandSide);\n  } else {\n    return leftHandSide.isSquare()\n      ? new LuDecomposition(leftHandSide).solve(rightHandSide)\n      : new QrDecomposition(leftHandSide).solve(rightHandSide);\n  }\n}\n\nfunction determinant(matrix) {\n  matrix = Matrix.checkMatrix(matrix);\n  if (matrix.isSquare()) {\n    if (matrix.columns === 0) {\n      return 1;\n    }\n\n    let a, b, c, d;\n    if (matrix.columns === 2) {\n      // 2 x 2 matrix\n      a = matrix.get(0, 0);\n      b = matrix.get(0, 1);\n      c = matrix.get(1, 0);\n      d = matrix.get(1, 1);\n\n      return a * d - b * c;\n    } else if (matrix.columns === 3) {\n      // 3 x 3 matrix\n      let subMatrix0, subMatrix1, subMatrix2;\n      subMatrix0 = new MatrixSelectionView(matrix, [1, 2], [1, 2]);\n      subMatrix1 = new MatrixSelectionView(matrix, [1, 2], [0, 2]);\n      subMatrix2 = new MatrixSelectionView(matrix, [1, 2], [0, 1]);\n      a = matrix.get(0, 0);\n      b = matrix.get(0, 1);\n      c = matrix.get(0, 2);\n\n      return (\n        a * determinant(subMatrix0) -\n        b * determinant(subMatrix1) +\n        c * determinant(subMatrix2)\n      );\n    } else {\n      // general purpose determinant using the LU decomposition\n      return new LuDecomposition(matrix).determinant;\n    }\n  } else {\n    throw Error('determinant can only be calculated for a square matrix');\n  }\n}\n\nfunction xrange(n, exception) {\n  let range = [];\n  for (let i = 0; i < n; i++) {\n    if (i !== exception) {\n      range.push(i);\n    }\n  }\n  return range;\n}\n\nfunction dependenciesOneRow(\n  error,\n  matrix,\n  index,\n  thresholdValue = 10e-10,\n  thresholdError = 10e-10,\n) {\n  if (error > thresholdError) {\n    return new Array(matrix.rows + 1).fill(0);\n  } else {\n    let returnArray = matrix.addRow(index, [0]);\n    for (let i = 0; i < returnArray.rows; i++) {\n      if (Math.abs(returnArray.get(i, 0)) < thresholdValue) {\n        returnArray.set(i, 0, 0);\n      }\n    }\n    return returnArray.to1DArray();\n  }\n}\n\nfunction linearDependencies(matrix, options = {}) {\n  const { thresholdValue = 10e-10, thresholdError = 10e-10 } = options;\n  matrix = Matrix.checkMatrix(matrix);\n\n  let n = matrix.rows;\n  let results = new Matrix(n, n);\n\n  for (let i = 0; i < n; i++) {\n    let b = Matrix.columnVector(matrix.getRow(i));\n    let Abis = matrix.subMatrixRow(xrange(n, i)).transpose();\n    let svd = new SingularValueDecomposition(Abis);\n    let x = svd.solve(b);\n    let error = Matrix.sub(b, Abis.mmul(x)).abs().max();\n    results.setRow(\n      i,\n      dependenciesOneRow(error, x, i, thresholdValue, thresholdError),\n    );\n  }\n  return results;\n}\n\nfunction pseudoInverse(matrix, threshold = Number.EPSILON) {\n  matrix = Matrix.checkMatrix(matrix);\n  if (matrix.isEmpty()) {\n    // with a zero dimension, the pseudo-inverse is the transpose, since all 0xn and nx0 matrices are singular\n    // (0xn)*(nx0)*(0xn) = 0xn\n    // (nx0)*(0xn)*(nx0) = nx0\n    return matrix.transpose();\n  }\n  let svdSolution = new SingularValueDecomposition(matrix, { autoTranspose: true });\n\n  let U = svdSolution.leftSingularVectors;\n  let V = svdSolution.rightSingularVectors;\n  let s = svdSolution.diagonal;\n\n  for (let i = 0; i < s.length; i++) {\n    if (Math.abs(s[i]) > threshold) {\n      s[i] = 1.0 / s[i];\n    } else {\n      s[i] = 0.0;\n    }\n  }\n\n  return V.mmul(Matrix.diag(s).mmul(U.transpose()));\n}\n\nfunction covariance(xMatrix, yMatrix = xMatrix, options = {}) {\n  xMatrix = new Matrix(xMatrix);\n  let yIsSame = false;\n  if (\n    typeof yMatrix === 'object' &&\n    !Matrix.isMatrix(yMatrix) &&\n    !isAnyArray.isAnyArray(yMatrix)\n  ) {\n    options = yMatrix;\n    yMatrix = xMatrix;\n    yIsSame = true;\n  } else {\n    yMatrix = new Matrix(yMatrix);\n  }\n  if (xMatrix.rows !== yMatrix.rows) {\n    throw new TypeError('Both matrices must have the same number of rows');\n  }\n  const { center = true } = options;\n  if (center) {\n    xMatrix = xMatrix.center('column');\n    if (!yIsSame) {\n      yMatrix = yMatrix.center('column');\n    }\n  }\n  const cov = xMatrix.transpose().mmul(yMatrix);\n  for (let i = 0; i < cov.rows; i++) {\n    for (let j = 0; j < cov.columns; j++) {\n      cov.set(i, j, cov.get(i, j) * (1 / (xMatrix.rows - 1)));\n    }\n  }\n  return cov;\n}\n\nfunction correlation(xMatrix, yMatrix = xMatrix, options = {}) {\n  xMatrix = new Matrix(xMatrix);\n  let yIsSame = false;\n  if (\n    typeof yMatrix === 'object' &&\n    !Matrix.isMatrix(yMatrix) &&\n    !isAnyArray.isAnyArray(yMatrix)\n  ) {\n    options = yMatrix;\n    yMatrix = xMatrix;\n    yIsSame = true;\n  } else {\n    yMatrix = new Matrix(yMatrix);\n  }\n  if (xMatrix.rows !== yMatrix.rows) {\n    throw new TypeError('Both matrices must have the same number of rows');\n  }\n\n  const { center = true, scale = true } = options;\n  if (center) {\n    xMatrix.center('column');\n    if (!yIsSame) {\n      yMatrix.center('column');\n    }\n  }\n  if (scale) {\n    xMatrix.scale('column');\n    if (!yIsSame) {\n      yMatrix.scale('column');\n    }\n  }\n\n  const sdx = xMatrix.standardDeviation('column', { unbiased: true });\n  const sdy = yIsSame\n    ? sdx\n    : yMatrix.standardDeviation('column', { unbiased: true });\n\n  const corr = xMatrix.transpose().mmul(yMatrix);\n  for (let i = 0; i < corr.rows; i++) {\n    for (let j = 0; j < corr.columns; j++) {\n      corr.set(\n        i,\n        j,\n        corr.get(i, j) * (1 / (sdx[i] * sdy[j])) * (1 / (xMatrix.rows - 1)),\n      );\n    }\n  }\n  return corr;\n}\n\nclass EigenvalueDecomposition {\n  constructor(matrix, options = {}) {\n    const { assumeSymmetric = false } = options;\n\n    matrix = WrapperMatrix2D.checkMatrix(matrix);\n    if (!matrix.isSquare()) {\n      throw new Error('Matrix is not a square matrix');\n    }\n\n    if (matrix.isEmpty()) {\n      throw new Error('Matrix must be non-empty');\n    }\n\n    let n = matrix.columns;\n    let V = new Matrix(n, n);\n    let d = new Float64Array(n);\n    let e = new Float64Array(n);\n    let value = matrix;\n    let i, j;\n\n    let isSymmetric = false;\n    if (assumeSymmetric) {\n      isSymmetric = true;\n    } else {\n      isSymmetric = matrix.isSymmetric();\n    }\n\n    if (isSymmetric) {\n      for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n          V.set(i, j, value.get(i, j));\n        }\n      }\n      tred2(n, e, d, V);\n      tql2(n, e, d, V);\n    } else {\n      let H = new Matrix(n, n);\n      let ort = new Float64Array(n);\n      for (j = 0; j < n; j++) {\n        for (i = 0; i < n; i++) {\n          H.set(i, j, value.get(i, j));\n        }\n      }\n      orthes(n, H, ort, V);\n      hqr2(n, e, d, V, H);\n    }\n\n    this.n = n;\n    this.e = e;\n    this.d = d;\n    this.V = V;\n  }\n\n  get realEigenvalues() {\n    return Array.from(this.d);\n  }\n\n  get imaginaryEigenvalues() {\n    return Array.from(this.e);\n  }\n\n  get eigenvectorMatrix() {\n    return this.V;\n  }\n\n  get diagonalMatrix() {\n    let n = this.n;\n    let e = this.e;\n    let d = this.d;\n    let X = new Matrix(n, n);\n    let i, j;\n    for (i = 0; i < n; i++) {\n      for (j = 0; j < n; j++) {\n        X.set(i, j, 0);\n      }\n      X.set(i, i, d[i]);\n      if (e[i] > 0) {\n        X.set(i, i + 1, e[i]);\n      } else if (e[i] < 0) {\n        X.set(i, i - 1, e[i]);\n      }\n    }\n    return X;\n  }\n}\n\nfunction tred2(n, e, d, V) {\n  let f, g, h, i, j, k, hh, scale;\n\n  for (j = 0; j < n; j++) {\n    d[j] = V.get(n - 1, j);\n  }\n\n  for (i = n - 1; i > 0; i--) {\n    scale = 0;\n    h = 0;\n    for (k = 0; k < i; k++) {\n      scale = scale + Math.abs(d[k]);\n    }\n\n    if (scale === 0) {\n      e[i] = d[i - 1];\n      for (j = 0; j < i; j++) {\n        d[j] = V.get(i - 1, j);\n        V.set(i, j, 0);\n        V.set(j, i, 0);\n      }\n    } else {\n      for (k = 0; k < i; k++) {\n        d[k] /= scale;\n        h += d[k] * d[k];\n      }\n\n      f = d[i - 1];\n      g = Math.sqrt(h);\n      if (f > 0) {\n        g = -g;\n      }\n\n      e[i] = scale * g;\n      h = h - f * g;\n      d[i - 1] = f - g;\n      for (j = 0; j < i; j++) {\n        e[j] = 0;\n      }\n\n      for (j = 0; j < i; j++) {\n        f = d[j];\n        V.set(j, i, f);\n        g = e[j] + V.get(j, j) * f;\n        for (k = j + 1; k <= i - 1; k++) {\n          g += V.get(k, j) * d[k];\n          e[k] += V.get(k, j) * f;\n        }\n        e[j] = g;\n      }\n\n      f = 0;\n      for (j = 0; j < i; j++) {\n        e[j] /= h;\n        f += e[j] * d[j];\n      }\n\n      hh = f / (h + h);\n      for (j = 0; j < i; j++) {\n        e[j] -= hh * d[j];\n      }\n\n      for (j = 0; j < i; j++) {\n        f = d[j];\n        g = e[j];\n        for (k = j; k <= i - 1; k++) {\n          V.set(k, j, V.get(k, j) - (f * e[k] + g * d[k]));\n        }\n        d[j] = V.get(i - 1, j);\n        V.set(i, j, 0);\n      }\n    }\n    d[i] = h;\n  }\n\n  for (i = 0; i < n - 1; i++) {\n    V.set(n - 1, i, V.get(i, i));\n    V.set(i, i, 1);\n    h = d[i + 1];\n    if (h !== 0) {\n      for (k = 0; k <= i; k++) {\n        d[k] = V.get(k, i + 1) / h;\n      }\n\n      for (j = 0; j <= i; j++) {\n        g = 0;\n        for (k = 0; k <= i; k++) {\n          g += V.get(k, i + 1) * V.get(k, j);\n        }\n        for (k = 0; k <= i; k++) {\n          V.set(k, j, V.get(k, j) - g * d[k]);\n        }\n      }\n    }\n\n    for (k = 0; k <= i; k++) {\n      V.set(k, i + 1, 0);\n    }\n  }\n\n  for (j = 0; j < n; j++) {\n    d[j] = V.get(n - 1, j);\n    V.set(n - 1, j, 0);\n  }\n\n  V.set(n - 1, n - 1, 1);\n  e[0] = 0;\n}\n\nfunction tql2(n, e, d, V) {\n  let g, h, i, j, k, l, m, p, r, dl1, c, c2, c3, el1, s, s2;\n\n  for (i = 1; i < n; i++) {\n    e[i - 1] = e[i];\n  }\n\n  e[n - 1] = 0;\n\n  let f = 0;\n  let tst1 = 0;\n  let eps = Number.EPSILON;\n\n  for (l = 0; l < n; l++) {\n    tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n    m = l;\n    while (m < n) {\n      if (Math.abs(e[m]) <= eps * tst1) {\n        break;\n      }\n      m++;\n    }\n\n    if (m > l) {\n      do {\n\n        g = d[l];\n        p = (d[l + 1] - g) / (2 * e[l]);\n        r = hypotenuse(p, 1);\n        if (p < 0) {\n          r = -r;\n        }\n\n        d[l] = e[l] / (p + r);\n        d[l + 1] = e[l] * (p + r);\n        dl1 = d[l + 1];\n        h = g - d[l];\n        for (i = l + 2; i < n; i++) {\n          d[i] -= h;\n        }\n\n        f = f + h;\n\n        p = d[m];\n        c = 1;\n        c2 = c;\n        c3 = c;\n        el1 = e[l + 1];\n        s = 0;\n        s2 = 0;\n        for (i = m - 1; i >= l; i--) {\n          c3 = c2;\n          c2 = c;\n          s2 = s;\n          g = c * e[i];\n          h = c * p;\n          r = hypotenuse(p, e[i]);\n          e[i + 1] = s * r;\n          s = e[i] / r;\n          c = p / r;\n          p = c * d[i] - s * g;\n          d[i + 1] = h + s * (c * g + s * d[i]);\n\n          for (k = 0; k < n; k++) {\n            h = V.get(k, i + 1);\n            V.set(k, i + 1, s * V.get(k, i) + c * h);\n            V.set(k, i, c * V.get(k, i) - s * h);\n          }\n        }\n\n        p = (-s * s2 * c3 * el1 * e[l]) / dl1;\n        e[l] = s * p;\n        d[l] = c * p;\n      } while (Math.abs(e[l]) > eps * tst1);\n    }\n    d[l] = d[l] + f;\n    e[l] = 0;\n  }\n\n  for (i = 0; i < n - 1; i++) {\n    k = i;\n    p = d[i];\n    for (j = i + 1; j < n; j++) {\n      if (d[j] < p) {\n        k = j;\n        p = d[j];\n      }\n    }\n\n    if (k !== i) {\n      d[k] = d[i];\n      d[i] = p;\n      for (j = 0; j < n; j++) {\n        p = V.get(j, i);\n        V.set(j, i, V.get(j, k));\n        V.set(j, k, p);\n      }\n    }\n  }\n}\n\nfunction orthes(n, H, ort, V) {\n  let low = 0;\n  let high = n - 1;\n  let f, g, h, i, j, m;\n  let scale;\n\n  for (m = low + 1; m <= high - 1; m++) {\n    scale = 0;\n    for (i = m; i <= high; i++) {\n      scale = scale + Math.abs(H.get(i, m - 1));\n    }\n\n    if (scale !== 0) {\n      h = 0;\n      for (i = high; i >= m; i--) {\n        ort[i] = H.get(i, m - 1) / scale;\n        h += ort[i] * ort[i];\n      }\n\n      g = Math.sqrt(h);\n      if (ort[m] > 0) {\n        g = -g;\n      }\n\n      h = h - ort[m] * g;\n      ort[m] = ort[m] - g;\n\n      for (j = m; j < n; j++) {\n        f = 0;\n        for (i = high; i >= m; i--) {\n          f += ort[i] * H.get(i, j);\n        }\n\n        f = f / h;\n        for (i = m; i <= high; i++) {\n          H.set(i, j, H.get(i, j) - f * ort[i]);\n        }\n      }\n\n      for (i = 0; i <= high; i++) {\n        f = 0;\n        for (j = high; j >= m; j--) {\n          f += ort[j] * H.get(i, j);\n        }\n\n        f = f / h;\n        for (j = m; j <= high; j++) {\n          H.set(i, j, H.get(i, j) - f * ort[j]);\n        }\n      }\n\n      ort[m] = scale * ort[m];\n      H.set(m, m - 1, scale * g);\n    }\n  }\n\n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      V.set(i, j, i === j ? 1 : 0);\n    }\n  }\n\n  for (m = high - 1; m >= low + 1; m--) {\n    if (H.get(m, m - 1) !== 0) {\n      for (i = m + 1; i <= high; i++) {\n        ort[i] = H.get(i, m - 1);\n      }\n\n      for (j = m; j <= high; j++) {\n        g = 0;\n        for (i = m; i <= high; i++) {\n          g += ort[i] * V.get(i, j);\n        }\n\n        g = g / ort[m] / H.get(m, m - 1);\n        for (i = m; i <= high; i++) {\n          V.set(i, j, V.get(i, j) + g * ort[i]);\n        }\n      }\n    }\n  }\n}\n\nfunction hqr2(nn, e, d, V, H) {\n  let n = nn - 1;\n  let low = 0;\n  let high = nn - 1;\n  let eps = Number.EPSILON;\n  let exshift = 0;\n  let norm = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let z = 0;\n  let iter = 0;\n  let i, j, k, l, m, t, w, x, y;\n  let ra, sa, vr, vi;\n  let notlast, cdivres;\n\n  for (i = 0; i < nn; i++) {\n    if (i < low || i > high) {\n      d[i] = H.get(i, i);\n      e[i] = 0;\n    }\n\n    for (j = Math.max(i - 1, 0); j < nn; j++) {\n      norm = norm + Math.abs(H.get(i, j));\n    }\n  }\n\n  while (n >= low) {\n    l = n;\n    while (l > low) {\n      s = Math.abs(H.get(l - 1, l - 1)) + Math.abs(H.get(l, l));\n      if (s === 0) {\n        s = norm;\n      }\n      if (Math.abs(H.get(l, l - 1)) < eps * s) {\n        break;\n      }\n      l--;\n    }\n\n    if (l === n) {\n      H.set(n, n, H.get(n, n) + exshift);\n      d[n] = H.get(n, n);\n      e[n] = 0;\n      n--;\n      iter = 0;\n    } else if (l === n - 1) {\n      w = H.get(n, n - 1) * H.get(n - 1, n);\n      p = (H.get(n - 1, n - 1) - H.get(n, n)) / 2;\n      q = p * p + w;\n      z = Math.sqrt(Math.abs(q));\n      H.set(n, n, H.get(n, n) + exshift);\n      H.set(n - 1, n - 1, H.get(n - 1, n - 1) + exshift);\n      x = H.get(n, n);\n\n      if (q >= 0) {\n        z = p >= 0 ? p + z : p - z;\n        d[n - 1] = x + z;\n        d[n] = d[n - 1];\n        if (z !== 0) {\n          d[n] = x - w / z;\n        }\n        e[n - 1] = 0;\n        e[n] = 0;\n        x = H.get(n, n - 1);\n        s = Math.abs(x) + Math.abs(z);\n        p = x / s;\n        q = z / s;\n        r = Math.sqrt(p * p + q * q);\n        p = p / r;\n        q = q / r;\n\n        for (j = n - 1; j < nn; j++) {\n          z = H.get(n - 1, j);\n          H.set(n - 1, j, q * z + p * H.get(n, j));\n          H.set(n, j, q * H.get(n, j) - p * z);\n        }\n\n        for (i = 0; i <= n; i++) {\n          z = H.get(i, n - 1);\n          H.set(i, n - 1, q * z + p * H.get(i, n));\n          H.set(i, n, q * H.get(i, n) - p * z);\n        }\n\n        for (i = low; i <= high; i++) {\n          z = V.get(i, n - 1);\n          V.set(i, n - 1, q * z + p * V.get(i, n));\n          V.set(i, n, q * V.get(i, n) - p * z);\n        }\n      } else {\n        d[n - 1] = x + p;\n        d[n] = x + p;\n        e[n - 1] = z;\n        e[n] = -z;\n      }\n\n      n = n - 2;\n      iter = 0;\n    } else {\n      x = H.get(n, n);\n      y = 0;\n      w = 0;\n      if (l < n) {\n        y = H.get(n - 1, n - 1);\n        w = H.get(n, n - 1) * H.get(n - 1, n);\n      }\n\n      if (iter === 10) {\n        exshift += x;\n        for (i = low; i <= n; i++) {\n          H.set(i, i, H.get(i, i) - x);\n        }\n        s = Math.abs(H.get(n, n - 1)) + Math.abs(H.get(n - 1, n - 2));\n        // eslint-disable-next-line no-multi-assign\n        x = y = 0.75 * s;\n        w = -0.4375 * s * s;\n      }\n\n      if (iter === 30) {\n        s = (y - x) / 2;\n        s = s * s + w;\n        if (s > 0) {\n          s = Math.sqrt(s);\n          if (y < x) {\n            s = -s;\n          }\n          s = x - w / ((y - x) / 2 + s);\n          for (i = low; i <= n; i++) {\n            H.set(i, i, H.get(i, i) - s);\n          }\n          exshift += s;\n          // eslint-disable-next-line no-multi-assign\n          x = y = w = 0.964;\n        }\n      }\n\n      iter = iter + 1;\n\n      m = n - 2;\n      while (m >= l) {\n        z = H.get(m, m);\n        r = x - z;\n        s = y - z;\n        p = (r * s - w) / H.get(m + 1, m) + H.get(m, m + 1);\n        q = H.get(m + 1, m + 1) - z - r - s;\n        r = H.get(m + 2, m + 1);\n        s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n        p = p / s;\n        q = q / s;\n        r = r / s;\n        if (m === l) {\n          break;\n        }\n        if (\n          Math.abs(H.get(m, m - 1)) * (Math.abs(q) + Math.abs(r)) <\n          eps *\n            (Math.abs(p) *\n              (Math.abs(H.get(m - 1, m - 1)) +\n                Math.abs(z) +\n                Math.abs(H.get(m + 1, m + 1))))\n        ) {\n          break;\n        }\n        m--;\n      }\n\n      for (i = m + 2; i <= n; i++) {\n        H.set(i, i - 2, 0);\n        if (i > m + 2) {\n          H.set(i, i - 3, 0);\n        }\n      }\n\n      for (k = m; k <= n - 1; k++) {\n        notlast = k !== n - 1;\n        if (k !== m) {\n          p = H.get(k, k - 1);\n          q = H.get(k + 1, k - 1);\n          r = notlast ? H.get(k + 2, k - 1) : 0;\n          x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n          if (x !== 0) {\n            p = p / x;\n            q = q / x;\n            r = r / x;\n          }\n        }\n\n        if (x === 0) {\n          break;\n        }\n\n        s = Math.sqrt(p * p + q * q + r * r);\n        if (p < 0) {\n          s = -s;\n        }\n\n        if (s !== 0) {\n          if (k !== m) {\n            H.set(k, k - 1, -s * x);\n          } else if (l !== m) {\n            H.set(k, k - 1, -H.get(k, k - 1));\n          }\n\n          p = p + s;\n          x = p / s;\n          y = q / s;\n          z = r / s;\n          q = q / p;\n          r = r / p;\n\n          for (j = k; j < nn; j++) {\n            p = H.get(k, j) + q * H.get(k + 1, j);\n            if (notlast) {\n              p = p + r * H.get(k + 2, j);\n              H.set(k + 2, j, H.get(k + 2, j) - p * z);\n            }\n\n            H.set(k, j, H.get(k, j) - p * x);\n            H.set(k + 1, j, H.get(k + 1, j) - p * y);\n          }\n\n          for (i = 0; i <= Math.min(n, k + 3); i++) {\n            p = x * H.get(i, k) + y * H.get(i, k + 1);\n            if (notlast) {\n              p = p + z * H.get(i, k + 2);\n              H.set(i, k + 2, H.get(i, k + 2) - p * r);\n            }\n\n            H.set(i, k, H.get(i, k) - p);\n            H.set(i, k + 1, H.get(i, k + 1) - p * q);\n          }\n\n          for (i = low; i <= high; i++) {\n            p = x * V.get(i, k) + y * V.get(i, k + 1);\n            if (notlast) {\n              p = p + z * V.get(i, k + 2);\n              V.set(i, k + 2, V.get(i, k + 2) - p * r);\n            }\n\n            V.set(i, k, V.get(i, k) - p);\n            V.set(i, k + 1, V.get(i, k + 1) - p * q);\n          }\n        }\n      }\n    }\n  }\n\n  if (norm === 0) {\n    return;\n  }\n\n  for (n = nn - 1; n >= 0; n--) {\n    p = d[n];\n    q = e[n];\n\n    if (q === 0) {\n      l = n;\n      H.set(n, n, 1);\n      for (i = n - 1; i >= 0; i--) {\n        w = H.get(i, i) - p;\n        r = 0;\n        for (j = l; j <= n; j++) {\n          r = r + H.get(i, j) * H.get(j, n);\n        }\n\n        if (e[i] < 0) {\n          z = w;\n          s = r;\n        } else {\n          l = i;\n          if (e[i] === 0) {\n            H.set(i, n, w !== 0 ? -r / w : -r / (eps * norm));\n          } else {\n            x = H.get(i, i + 1);\n            y = H.get(i + 1, i);\n            q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n            t = (x * s - z * r) / q;\n            H.set(i, n, t);\n            H.set(\n              i + 1,\n              n,\n              Math.abs(x) > Math.abs(z) ? (-r - w * t) / x : (-s - y * t) / z,\n            );\n          }\n\n          t = Math.abs(H.get(i, n));\n          if (eps * t * t > 1) {\n            for (j = i; j <= n; j++) {\n              H.set(j, n, H.get(j, n) / t);\n            }\n          }\n        }\n      }\n    } else if (q < 0) {\n      l = n - 1;\n\n      if (Math.abs(H.get(n, n - 1)) > Math.abs(H.get(n - 1, n))) {\n        H.set(n - 1, n - 1, q / H.get(n, n - 1));\n        H.set(n - 1, n, -(H.get(n, n) - p) / H.get(n, n - 1));\n      } else {\n        cdivres = cdiv(0, -H.get(n - 1, n), H.get(n - 1, n - 1) - p, q);\n        H.set(n - 1, n - 1, cdivres[0]);\n        H.set(n - 1, n, cdivres[1]);\n      }\n\n      H.set(n, n - 1, 0);\n      H.set(n, n, 1);\n      for (i = n - 2; i >= 0; i--) {\n        ra = 0;\n        sa = 0;\n        for (j = l; j <= n; j++) {\n          ra = ra + H.get(i, j) * H.get(j, n - 1);\n          sa = sa + H.get(i, j) * H.get(j, n);\n        }\n\n        w = H.get(i, i) - p;\n\n        if (e[i] < 0) {\n          z = w;\n          r = ra;\n          s = sa;\n        } else {\n          l = i;\n          if (e[i] === 0) {\n            cdivres = cdiv(-ra, -sa, w, q);\n            H.set(i, n - 1, cdivres[0]);\n            H.set(i, n, cdivres[1]);\n          } else {\n            x = H.get(i, i + 1);\n            y = H.get(i + 1, i);\n            vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n            vi = (d[i] - p) * 2 * q;\n            if (vr === 0 && vi === 0) {\n              vr =\n                eps *\n                norm *\n                (Math.abs(w) +\n                  Math.abs(q) +\n                  Math.abs(x) +\n                  Math.abs(y) +\n                  Math.abs(z));\n            }\n            cdivres = cdiv(\n              x * r - z * ra + q * sa,\n              x * s - z * sa - q * ra,\n              vr,\n              vi,\n            );\n            H.set(i, n - 1, cdivres[0]);\n            H.set(i, n, cdivres[1]);\n            if (Math.abs(x) > Math.abs(z) + Math.abs(q)) {\n              H.set(\n                i + 1,\n                n - 1,\n                (-ra - w * H.get(i, n - 1) + q * H.get(i, n)) / x,\n              );\n              H.set(\n                i + 1,\n                n,\n                (-sa - w * H.get(i, n) - q * H.get(i, n - 1)) / x,\n              );\n            } else {\n              cdivres = cdiv(\n                -r - y * H.get(i, n - 1),\n                -s - y * H.get(i, n),\n                z,\n                q,\n              );\n              H.set(i + 1, n - 1, cdivres[0]);\n              H.set(i + 1, n, cdivres[1]);\n            }\n          }\n\n          t = Math.max(Math.abs(H.get(i, n - 1)), Math.abs(H.get(i, n)));\n          if (eps * t * t > 1) {\n            for (j = i; j <= n; j++) {\n              H.set(j, n - 1, H.get(j, n - 1) / t);\n              H.set(j, n, H.get(j, n) / t);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  for (i = 0; i < nn; i++) {\n    if (i < low || i > high) {\n      for (j = i; j < nn; j++) {\n        V.set(i, j, H.get(i, j));\n      }\n    }\n  }\n\n  for (j = nn - 1; j >= low; j--) {\n    for (i = low; i <= high; i++) {\n      z = 0;\n      for (k = low; k <= Math.min(j, high); k++) {\n        z = z + V.get(i, k) * H.get(k, j);\n      }\n      V.set(i, j, z);\n    }\n  }\n}\n\nfunction cdiv(xr, xi, yr, yi) {\n  let r, d;\n  if (Math.abs(yr) > Math.abs(yi)) {\n    r = yi / yr;\n    d = yr + r * yi;\n    return [(xr + r * xi) / d, (xi - r * xr) / d];\n  } else {\n    r = yr / yi;\n    d = yi + r * yr;\n    return [(r * xr + xi) / d, (r * xi - xr) / d];\n  }\n}\n\nclass CholeskyDecomposition {\n  constructor(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n    if (!value.isSymmetric()) {\n      throw new Error('Matrix is not symmetric');\n    }\n\n    let a = value;\n    let dimension = a.rows;\n    let l = new Matrix(dimension, dimension);\n    let positiveDefinite = true;\n    let i, j, k;\n\n    for (j = 0; j < dimension; j++) {\n      let d = 0;\n      for (k = 0; k < j; k++) {\n        let s = 0;\n        for (i = 0; i < k; i++) {\n          s += l.get(k, i) * l.get(j, i);\n        }\n        s = (a.get(j, k) - s) / l.get(k, k);\n        l.set(j, k, s);\n        d = d + s * s;\n      }\n\n      d = a.get(j, j) - d;\n\n      positiveDefinite &&= d > 0;\n      l.set(j, j, Math.sqrt(Math.max(d, 0)));\n      for (k = j + 1; k < dimension; k++) {\n        l.set(j, k, 0);\n      }\n    }\n\n    this.L = l;\n    this.positiveDefinite = positiveDefinite;\n  }\n\n  isPositiveDefinite() {\n    return this.positiveDefinite;\n  }\n\n  solve(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    let l = this.L;\n    let dimension = l.rows;\n\n    if (value.rows !== dimension) {\n      throw new Error('Matrix dimensions do not match');\n    }\n    if (this.isPositiveDefinite() === false) {\n      throw new Error('Matrix is not positive definite');\n    }\n\n    let count = value.columns;\n    let B = value.clone();\n    let i, j, k;\n\n    for (k = 0; k < dimension; k++) {\n      for (j = 0; j < count; j++) {\n        for (i = 0; i < k; i++) {\n          B.set(k, j, B.get(k, j) - B.get(i, j) * l.get(k, i));\n        }\n        B.set(k, j, B.get(k, j) / l.get(k, k));\n      }\n    }\n\n    for (k = dimension - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        for (i = k + 1; i < dimension; i++) {\n          B.set(k, j, B.get(k, j) - B.get(i, j) * l.get(i, k));\n        }\n        B.set(k, j, B.get(k, j) / l.get(k, k));\n      }\n    }\n\n    return B;\n  }\n\n  get lowerTriangularMatrix() {\n    return this.L;\n  }\n}\n\nclass nipals {\n  constructor(X, options = {}) {\n    X = WrapperMatrix2D.checkMatrix(X);\n    let { Y } = options;\n    const {\n      scaleScores = false,\n      maxIterations = 1000,\n      terminationCriteria = 1e-10,\n    } = options;\n\n    let u;\n    if (Y) {\n      if (isAnyArray.isAnyArray(Y) && typeof Y[0] === 'number') {\n        Y = Matrix.columnVector(Y);\n      } else {\n        Y = WrapperMatrix2D.checkMatrix(Y);\n      }\n      if (Y.rows !== X.rows) {\n        throw new Error('Y should have the same number of rows as X');\n      }\n      u = Y.getColumnVector(0);\n    } else {\n      u = X.getColumnVector(0);\n    }\n\n    let diff = 1;\n    let t, q, w, tOld;\n\n    for (\n      let counter = 0;\n      counter < maxIterations && diff > terminationCriteria;\n      counter++\n    ) {\n      w = X.transpose().mmul(u).div(u.transpose().mmul(u).get(0, 0));\n      w = w.div(w.norm());\n\n      t = X.mmul(w).div(w.transpose().mmul(w).get(0, 0));\n\n      if (counter > 0) {\n        diff = t.clone().sub(tOld).pow(2).sum();\n      }\n      tOld = t.clone();\n\n      if (Y) {\n        q = Y.transpose().mmul(t).div(t.transpose().mmul(t).get(0, 0));\n        q = q.div(q.norm());\n\n        u = Y.mmul(q).div(q.transpose().mmul(q).get(0, 0));\n      } else {\n        u = t;\n      }\n    }\n\n    if (Y) {\n      let p = X.transpose().mmul(t).div(t.transpose().mmul(t).get(0, 0));\n      p = p.div(p.norm());\n      let xResidual = X.clone().sub(t.clone().mmul(p.transpose()));\n      let residual = u.transpose().mmul(t).div(t.transpose().mmul(t).get(0, 0));\n      let yResidual = Y.clone().sub(\n        t.clone().mulS(residual.get(0, 0)).mmul(q.transpose()),\n      );\n\n      this.t = t;\n      this.p = p.transpose();\n      this.w = w.transpose();\n      this.q = q;\n      this.u = u;\n      this.s = t.transpose().mmul(t);\n      this.xResidual = xResidual;\n      this.yResidual = yResidual;\n      this.betas = residual;\n    } else {\n      this.w = w.transpose();\n      this.s = t.transpose().mmul(t).sqrt();\n      if (scaleScores) {\n        this.t = t.clone().div(this.s.get(0, 0));\n      } else {\n        this.t = t;\n      }\n      this.xResidual = X.sub(t.mmul(w.transpose()));\n    }\n  }\n}\n\nexports.AbstractMatrix = AbstractMatrix;\nexports.CHO = CholeskyDecomposition;\nexports.CholeskyDecomposition = CholeskyDecomposition;\nexports.DistanceMatrix = DistanceMatrix;\nexports.EVD = EigenvalueDecomposition;\nexports.EigenvalueDecomposition = EigenvalueDecomposition;\nexports.LU = LuDecomposition;\nexports.LuDecomposition = LuDecomposition;\nexports.Matrix = Matrix;\nexports.MatrixColumnSelectionView = MatrixColumnSelectionView;\nexports.MatrixColumnView = MatrixColumnView;\nexports.MatrixFlipColumnView = MatrixFlipColumnView;\nexports.MatrixFlipRowView = MatrixFlipRowView;\nexports.MatrixRowSelectionView = MatrixRowSelectionView;\nexports.MatrixRowView = MatrixRowView;\nexports.MatrixSelectionView = MatrixSelectionView;\nexports.MatrixSubView = MatrixSubView;\nexports.MatrixTransposeView = MatrixTransposeView;\nexports.NIPALS = nipals;\nexports.Nipals = nipals;\nexports.QR = QrDecomposition;\nexports.QrDecomposition = QrDecomposition;\nexports.SVD = SingularValueDecomposition;\nexports.SingularValueDecomposition = SingularValueDecomposition;\nexports.SymmetricMatrix = SymmetricMatrix;\nexports.WrapperMatrix1D = WrapperMatrix1D;\nexports.WrapperMatrix2D = WrapperMatrix2D;\nexports.correlation = correlation;\nexports.covariance = covariance;\nexports.default = Matrix;\nexports.determinant = determinant;\nexports.inverse = inverse;\nexports.linearDependencies = linearDependencies;\nexports.pseudoInverse = pseudoInverse;\nexports.solve = solve;\nexports.wrap = wrap;\n","import * as matrix from './matrix.js';\n\nexport const AbstractMatrix = matrix.AbstractMatrix;\nexport const CHO = matrix.CHO;\nexport const CholeskyDecomposition = matrix.CholeskyDecomposition;\nexport const DistanceMatrix = matrix.DistanceMatrix;\nexport const EVD = matrix.EVD;\nexport const EigenvalueDecomposition = matrix.EigenvalueDecomposition;\nexport const LU = matrix.LU;\nexport const LuDecomposition = matrix.LuDecomposition;\nexport const Matrix = matrix.Matrix;\nexport const MatrixColumnSelectionView = matrix.MatrixColumnSelectionView;\nexport const MatrixColumnView = matrix.MatrixColumnView;\nexport const MatrixFlipColumnView = matrix.MatrixFlipColumnView;\nexport const MatrixFlipRowView = matrix.MatrixFlipRowView;\nexport const MatrixRowSelectionView = matrix.MatrixRowSelectionView;\nexport const MatrixRowView = matrix.MatrixRowView;\nexport const MatrixSelectionView = matrix.MatrixSelectionView;\nexport const MatrixSubView = matrix.MatrixSubView;\nexport const MatrixTransposeView = matrix.MatrixTransposeView;\nexport const NIPALS = matrix.NIPALS;\nexport const Nipals = matrix.Nipals;\nexport const QR = matrix.QR;\nexport const QrDecomposition = matrix.QrDecomposition;\nexport const SVD = matrix.SVD;\nexport const SingularValueDecomposition = matrix.SingularValueDecomposition;\nexport const SymmetricMatrix = matrix.SymmetricMatrix;\nexport const WrapperMatrix1D = matrix.WrapperMatrix1D;\nexport const WrapperMatrix2D = matrix.WrapperMatrix2D;\nexport const correlation = matrix.correlation;\nexport const covariance = matrix.covariance;\nexport default matrix.default.Matrix ? matrix.default.Matrix : matrix.Matrix;\nexport const determinant = matrix.determinant;\nexport const inverse = matrix.inverse;\nexport const linearDependencies = matrix.linearDependencies;\nexport const pseudoInverse = matrix.pseudoInverse;\nexport const solve = matrix.solve;\nexport const wrap = matrix.wrap;\n","import { Matrix, MatrixTransposeView, solve } from 'ml-matrix';\nimport { BaseRegression, checkArrayLength, maybeToPrecision, } from 'ml-regression-base';\nexport class PolynomialRegression extends BaseRegression {\n    /**\n     * @param x - independent or explanatory variable\n     * @param y - dependent or response variable\n     * @param degree - degree of the polynomial regression, or array of powers to be used. When degree is an array, intercept at zero is forced to false/ignored.\n     * @example `new PolynomialRegression(x, y, 2)`, in this case, you can pass the option `interceptAtZero`, if you need it.\n     * @example `new PolynomialRegression(x, y, [1, 3, 5])`\n     * Each of the degrees corresponds to a column, so if you have them switched, just do:\n     * @example `new PolynomialRegression(x, y, [3, 1, 5])`\n     *\n     * @param options.interceptAtZero - force the polynomial regression so that f(0) = 0\n     */\n    constructor(x, y, degree, options = {}) {\n        super();\n        // @ts-expect-error internal use only\n        if (x === true) {\n            // @ts-expect-error internal use only\n            this.degree = y.degree;\n            // @ts-expect-error internal use only\n            this.powers = y.powers;\n            // @ts-expect-error internal use only\n            this.coefficients = y.coefficients;\n        }\n        else {\n            checkArrayLength(x, y);\n            const result = regress(x, y, degree, options);\n            this.degree = result.degree;\n            this.powers = result.powers;\n            this.coefficients = result.coefficients;\n        }\n    }\n    _predict(x) {\n        let y = 0;\n        for (let k = 0; k < this.powers.length; k++) {\n            y += this.coefficients[k] * x ** this.powers[k];\n        }\n        return y;\n    }\n    toJSON() {\n        return {\n            name: 'polynomialRegression',\n            degree: this.degree,\n            powers: this.powers,\n            coefficients: this.coefficients,\n        };\n    }\n    toString(precision) {\n        return this._toFormula(precision, false);\n    }\n    toLaTeX(precision) {\n        return this._toFormula(precision, true);\n    }\n    _toFormula(precision, isLaTeX) {\n        let sup = '^';\n        let closeSup = '';\n        let times = ' * ';\n        if (isLaTeX) {\n            sup = '^{';\n            closeSup = '}';\n            times = '';\n        }\n        let fn = '';\n        let str = '';\n        for (let k = 0; k < this.coefficients.length; k++) {\n            str = '';\n            if (this.coefficients[k] !== 0) {\n                if (this.powers[k] === 0) {\n                    str = maybeToPrecision(this.coefficients[k], precision);\n                }\n                else if (this.powers[k] === 1) {\n                    str = `${maybeToPrecision(this.coefficients[k], precision) + times}x`;\n                }\n                else {\n                    str = `${maybeToPrecision(this.coefficients[k], precision) + times}x${sup}${this.powers[k]}${closeSup}`;\n                }\n                if (this.coefficients[k] > 0 && k !== this.coefficients.length - 1) {\n                    str = ` + ${str}`;\n                }\n                else if (k !== this.coefficients.length - 1) {\n                    str = ` ${str}`;\n                }\n            }\n            fn = str + fn;\n        }\n        if (fn.startsWith('+')) {\n            fn = fn.slice(1);\n        }\n        return `f(x) = ${fn}`;\n    }\n    static load(json) {\n        if (json.name !== 'polynomialRegression') {\n            throw new TypeError('not a polynomial regression model');\n        }\n        // @ts-expect-error internal use only\n        return new PolynomialRegression(true, json);\n    }\n}\n/**\n * Perform a polynomial regression on the given data set.\n * This is an internal function.\n * @param x - independent or explanatory variable\n * @param y - dependent or response variable\n * @param degree - degree of the polynomial regression\n * @param options.interceptAtZero - force the polynomial regression so that $f(0) = 0$\n */\nfunction regress(x, y, degree, options = {}) {\n    const n = x.length;\n    let { interceptAtZero = false } = options;\n    let powers = [];\n    if (Array.isArray(degree)) {\n        powers = degree;\n        interceptAtZero = false; //must be false in this case\n    }\n    else if (typeof degree === 'number') {\n        if (interceptAtZero) {\n            powers = new Array(degree);\n            for (let k = 0; k < degree; k++) {\n                powers[k] = k + 1;\n            }\n        }\n        else {\n            powers = new Array(degree + 1);\n            for (let k = 0; k <= degree; k++) {\n                powers[k] = k;\n            }\n        }\n    }\n    const nCoefficients = powers.length; //1 per power, in any case.\n    const F = new Matrix(n, nCoefficients);\n    const Y = new Matrix([y]);\n    for (let k = 0; k < nCoefficients; k++) {\n        for (let i = 0; i < n; i++) {\n            if (powers[k] === 0) {\n                F.set(i, k, 1);\n            }\n            else {\n                F.set(i, k, x[i] ** powers[k]);\n            }\n        }\n    }\n    const FT = new MatrixTransposeView(F);\n    const A = FT.mmul(F);\n    const B = FT.mmul(new MatrixTransposeView(Y));\n    return {\n        coefficients: solve(A, B).to1DArray(),\n        degree: Math.max(...powers),\n        powers,\n    };\n}\n//# sourceMappingURL=index.js.map","import { BaseRegression, maybeToPrecision } from \"ml-regression-base\";\nimport { PolynomialRegression } from \"ml-regression-polynomial\";\n\n/*\n * Function that calculate the potential fit in the form f(x) = A*x^M\n * with a given M and return de A coefficient.\n *\n * @param {Vector} X - Vector of the x positions of the points.\n * @param {Vector} Y - Vector of the x positions of the points.\n * @param {Number} M - The exponent of the potential fit.\n * @return {Number} A - The A coefficient of the potential fit.\n */\nexport class PotentialRegression extends BaseRegression {\n  /**\n   * @class\n   * @param x - Independent variable\n   * @param y - Dependent variable\n   * @param M\n   */\n  constructor(x, y, M) {\n    super();\n    if (x === true) {\n      // reloading model\n      this.A = y.A;\n      this.M = y.M;\n    } else {\n      let n = x.length;\n      if (n !== y.length) {\n        throw new RangeError(\"input and output array have a different length\");\n      }\n\n      let linear = new PolynomialRegression(x, y, [M]);\n      this.A = linear.coefficients[0];\n      this.M = M;\n    }\n  }\n\n  _predict(x) {\n    return this.A * x ** this.M;\n  }\n\n  toJSON() {\n    return {\n      name: \"potentialRegression\",\n      A: this.A,\n      M: this.M,\n    };\n  }\n\n  toString(precision) {\n    return `f(x) = ${maybeToPrecision(this.A, precision)} * x^${this.M}`;\n  }\n\n  toLaTeX(precision) {\n    if (this.M >= 0) {\n      return `f(x) = ${maybeToPrecision(this.A, precision)}x^{${this.M}}`;\n    } else {\n      return `f(x) = \\\\frac{${maybeToPrecision(this.A, precision)}}{x^{${-this\n        .M}}}`;\n    }\n  }\n\n  static load(json) {\n    if (json.name !== \"potentialRegression\") {\n      throw new TypeError(\"not a potential regression model\");\n    }\n    return new PotentialRegression(true, json);\n  }\n}\n","import { BaseRegression, checkArrayLength, maybeToPrecision, } from 'ml-regression-base';\n/**\n * Class representing simple linear regression.\n * The regression uses OLS to calculate intercept and slope.\n */\nexport class SimpleLinearRegression extends BaseRegression {\n    /**\n     * @param x - explanatory variable\n     * @param y - response variable\n     */\n    constructor(x, y) {\n        super();\n        // @ts-expect-error internal use of the constructor, from `this.load`\n        if (x === true) {\n            // @ts-expect-error internal use of the constructor, from `this.load`\n            const yObj = y;\n            this.slope = yObj.slope;\n            this.intercept = yObj.intercept;\n            this.coefficients = [yObj.intercept, yObj.slope];\n        }\n        else {\n            checkArrayLength(x, y);\n            const result = regress(x, y);\n            this.slope = result.slope;\n            this.intercept = result.intercept;\n            this.coefficients = [result.intercept, result.slope];\n        }\n    }\n    /**\n     * Get the parameters and model name in JSON format\n     * @returns\n     */\n    toJSON() {\n        return {\n            name: 'simpleLinearRegression',\n            slope: this.slope,\n            intercept: this.intercept,\n        };\n    }\n    _predict(x) {\n        return this.slope * x + this.intercept;\n    }\n    /**\n     * Finds x for the given y value.\n     * @param y - response variable value\n     * @returns - x value\n     */\n    computeX(y) {\n        return (y - this.intercept) / this.slope;\n    }\n    /**\n     * Strings the linear function in the form 'f(x) = ax + b'\n     * @param precision - number of significant figures.\n     * @returns\n     */\n    toString(precision) {\n        let result = 'f(x) = ';\n        if (this.slope !== 0) {\n            const xFactor = maybeToPrecision(this.slope, precision);\n            result += `${xFactor === '1' ? '' : `${xFactor} * `}x`;\n            if (this.intercept !== 0) {\n                const absIntercept = Math.abs(this.intercept);\n                const operator = absIntercept === this.intercept ? '+' : '-';\n                result += ` ${operator} ${maybeToPrecision(absIntercept, precision)}`;\n            }\n        }\n        else {\n            result += maybeToPrecision(this.intercept, precision);\n        }\n        return result;\n    }\n    /**\n     * Strings the linear function in the form 'f(x) = ax + b'\n     * @param precision - number of significant figures.\n     * @returns\n     */\n    toLaTeX(precision) {\n        return this.toString(precision);\n    }\n    /**\n     * Class instance from a JSON Object.\n     * @param json\n     * @returns\n     */\n    static load(json) {\n        if (json.name !== 'simpleLinearRegression') {\n            throw new TypeError('not a SLR model');\n        }\n        // @ts-expect-error internal use of the constructor\n        return new SimpleLinearRegression(true, json);\n    }\n}\n/**\n * Internal  function.\n * It determines the parameters (slope, intercept) of the line that best fit the `x,y` vector-data (simple linear regression).\n * @param x - explanatory variable\n * @param y - response variable\n * @returns - slope and intercept of the best fit line\n */\nfunction regress(x, y) {\n    const n = x.length;\n    let xSum = 0;\n    let ySum = 0;\n    let xSquared = 0;\n    let xY = 0;\n    for (let i = 0; i < n; i++) {\n        xSum += x[i];\n        ySum += y[i];\n        xSquared += x[i] * x[i];\n        xY += x[i] * y[i];\n    }\n    const numerator = n * xY - xSum * ySum;\n    const slope = numerator / (n * xSquared - xSum * xSum);\n    return {\n        slope,\n        intercept: (1 / n) * ySum - slope * (1 / n) * xSum,\n    };\n}\n//# sourceMappingURL=index.js.map","import {\n  BaseRegression,\n  checkArrayLength,\n  maybeToPrecision,\n} from 'ml-regression-base';\nimport { SimpleLinearRegression } from 'ml-regression-simple-linear';\n\nexport class ExponentialRegression extends BaseRegression {\n  constructor(x, y) {\n    super();\n    if (x === true) {\n      this.A = y.A;\n      this.B = y.B;\n    } else {\n      checkArrayLength(x, y);\n      regress(this, x, y);\n    }\n  }\n\n  _predict(input) {\n    return this.B * Math.exp(input * this.A);\n  }\n\n  toJSON() {\n    return {\n      name: 'exponentialRegression',\n      A: this.A,\n      B: this.B,\n    };\n  }\n\n  toString(precision) {\n    return `f(x) = ${maybeToPrecision(\n      this.B,\n      precision,\n    )} * e^(${maybeToPrecision(this.A, precision)} * x)`;\n  }\n\n  toLaTeX(precision) {\n    if (this.A >= 0) {\n      return `f(x) = ${maybeToPrecision(\n        this.B,\n        precision,\n      )}e^{${maybeToPrecision(this.A, precision)}x}`;\n    } else {\n      return `f(x) = \\\\frac{${maybeToPrecision(\n        this.B,\n        precision,\n      )}}{e^{${maybeToPrecision(-this.A, precision)}x}}`;\n    }\n  }\n\n  static load(json) {\n    if (json.name !== 'exponentialRegression') {\n      throw new TypeError('not a exponential regression model');\n    }\n    return new ExponentialRegression(true, json);\n  }\n}\n\nfunction regress(er, x, y) {\n  const n = x.length;\n  const yl = new Array(n);\n  for (let i = 0; i < n; i++) {\n    yl[i] = Math.log(y[i]);\n  }\n\n  const linear = new SimpleLinearRegression(x, yl);\n  er.A = linear.slope;\n  er.B = Math.exp(linear.intercept);\n}\n","import {\n  BaseRegression,\n  checkArrayLength,\n  maybeToPrecision,\n} from 'ml-regression-base';\nimport { SimpleLinearRegression } from 'ml-regression-simple-linear';\n\nexport class PowerRegression extends BaseRegression {\n  constructor(x, y) {\n    super();\n    if (x === true) {\n      // reloading model\n      this.A = y.A;\n      this.B = y.B;\n    } else {\n      checkArrayLength(x, y);\n      regress(this, x, y);\n    }\n  }\n\n  _predict(newInputs) {\n    return this.A * newInputs ** this.B;\n  }\n\n  toJSON() {\n    return {\n      name: 'powerRegression',\n      A: this.A,\n      B: this.B,\n    };\n  }\n\n  toString(precision) {\n    return `f(x) = ${maybeToPrecision(\n      this.A,\n      precision,\n    )} * x^${maybeToPrecision(this.B, precision)}`;\n  }\n\n  toLaTeX(precision) {\n    let latex = '';\n    if (this.B >= 0) {\n      latex = `f(x) = ${maybeToPrecision(\n        this.A,\n        precision,\n      )}x^{${maybeToPrecision(this.B, precision)}}`;\n    } else {\n      latex = `f(x) = \\\\frac{${maybeToPrecision(\n        this.A,\n        precision,\n      )}}{x^{${maybeToPrecision(-this.B, precision)}}}`;\n    }\n    latex = latex.replace(/e([+-]?[0-9]+)/g, 'e^{$1}');\n    return latex;\n  }\n\n  static load(json) {\n    if (json.name !== 'powerRegression') {\n      throw new TypeError('not a power regression model');\n    }\n    return new PowerRegression(true, json);\n  }\n}\n\nfunction regress(pr, x, y) {\n  const n = x.length;\n  const xl = new Array(n);\n  const yl = new Array(n);\n  for (let i = 0; i < n; i++) {\n    xl[i] = Math.log(x[i]);\n    yl[i] = Math.log(y[i]);\n  }\n\n  const linear = new SimpleLinearRegression(xl, yl);\n  pr.A = Math.exp(linear.intercept);\n  pr.B = linear.slope;\n}\n","import { Matrix, SVD, pseudoInverse } from 'ml-matrix';\n\nexport default class MultivariateLinearRegression {\n  constructor(x, y, options = {}) {\n    const { intercept = true, statistics = true } = options;\n    this.statistics = statistics;\n    if (x === true) {\n      this.weights = y.weights;\n      this.inputs = y.inputs;\n      this.outputs = y.outputs;\n      this.intercept = y.intercept;\n    } else {\n      x = new Matrix(x);\n      y = new Matrix(y);\n      if (intercept) {\n        x.addColumn(new Array(x.rows).fill(1));\n      }\n      let xt = x.transpose();\n      const xx = xt.mmul(x);\n      const xy = xt.mmul(y);\n      const invxx = new SVD(xx).inverse();\n      const beta = xy.transpose().mmul(invxx).transpose();\n      this.weights = beta.to2DArray();\n      this.inputs = x.columns;\n      this.outputs = y.columns;\n      if (intercept) this.inputs--;\n      this.intercept = intercept;\n      if (statistics) {\n        /*\n         * Let's add some basic statistics about the beta's to be able to interpret them.\n         * source: http://dept.stat.lsa.umich.edu/~kshedden/Courses/Stat401/Notes/401-multreg.pdf\n         * validated against Excel Regression AddIn\n         * test: \"datamining statistics test\"\n         */\n        const fittedValues = x.mmul(beta);\n        const residuals = y.clone().addM(fittedValues.neg());\n        const variance =\n          residuals\n            .to2DArray()\n            .map((ri) => Math.pow(ri[0], 2))\n            .reduce((a, b) => a + b) /\n          (y.rows - x.columns);\n        this.stdError = Math.sqrt(variance);\n        this.stdErrorMatrix = pseudoInverse(xx).mul(variance);\n        this.stdErrors = this.stdErrorMatrix\n          .diagonal()\n          .map((d) => Math.sqrt(d));\n        this.tStats = this.weights.map((d, i) =>\n          this.stdErrors[i] === 0 ? 0 : d[0] / this.stdErrors[i],\n        );\n      }\n    }\n  }\n\n  predict(x) {\n    if (Array.isArray(x)) {\n      if (typeof x[0] === 'number') {\n        return this._predict(x);\n      } else if (Array.isArray(x[0])) {\n        const y = new Array(x.length);\n        for (let i = 0; i < x.length; i++) {\n          y[i] = this._predict(x[i]);\n        }\n        return y;\n      }\n    } else if (Matrix.isMatrix(x)) {\n      const y = new Matrix(x.rows, this.outputs);\n      for (let i = 0; i < x.rows; i++) {\n        y.setRow(i, this._predict(x.getRow(i)));\n      }\n      return y;\n    }\n    throw new TypeError('x must be a matrix or array of numbers');\n  }\n\n  _predict(x) {\n    const result = new Array(this.outputs);\n    if (this.intercept) {\n      for (let i = 0; i < this.outputs; i++) {\n        result[i] = this.weights[this.inputs][i];\n      }\n    } else {\n      result.fill(0);\n    }\n    for (let i = 0; i < this.inputs; i++) {\n      for (let j = 0; j < this.outputs; j++) {\n        result[j] += this.weights[i][j] * x[i];\n      }\n    }\n    return result;\n  }\n\n  score() {\n    throw new Error('score method is not implemented yet');\n  }\n\n  toJSON() {\n    return {\n      name: 'multivariateLinearRegression',\n      weights: this.weights,\n      inputs: this.inputs,\n      outputs: this.outputs,\n      intercept: this.intercept,\n      summary: this.statistics\n        ? {\n            regressionStatistics: {\n              standardError: this.stdError,\n              observations: this.outputs,\n            },\n            variables: this.weights.map((d, i) => {\n              return {\n                label:\n                  i === this.weights.length - 1\n                    ? 'Intercept'\n                    : `X Variable ${i + 1}`,\n                coefficients: d,\n                standardError: this.stdErrors[i],\n                tStat: this.tStats[i],\n              };\n            }),\n          }\n        : undefined,\n    };\n  }\n\n  static load(model) {\n    if (model.name !== 'multivariateLinearRegression') {\n      throw new Error('not a MLR model');\n    }\n    return new MultivariateLinearRegression(true, model);\n  }\n}\n","export function squaredEuclidean(p, q) {\r\n    let d = 0;\r\n    for (let i = 0; i < p.length; i++) {\r\n        d += (p[i] - q[i]) * (p[i] - q[i]);\r\n    }\r\n    return d;\r\n}\r\nexport function euclidean(p, q) {\r\n    return Math.sqrt(squaredEuclidean(p, q));\r\n}\r\n","'use strict';\n\nconst { squaredEuclidean } = require('ml-distance-euclidean');\n\nconst defaultOptions = {\n  sigma: 1\n};\n\nclass GaussianKernel {\n  constructor(options) {\n    options = Object.assign({}, defaultOptions, options);\n    this.sigma = options.sigma;\n    this.divisor = 2 * options.sigma * options.sigma;\n  }\n  compute(x, y) {\n    const distance = squaredEuclidean(x, y);\n    return Math.exp(-distance / this.divisor);\n  }\n}\n\nmodule.exports = GaussianKernel;\n","'use strict';\n\nconst defaultOptions = {\n  degree: 1,\n  constant: 1,\n  scale: 1\n};\n\nclass PolynomialKernel {\n  constructor(options) {\n    options = Object.assign({}, defaultOptions, options);\n\n    this.degree = options.degree;\n    this.constant = options.constant;\n    this.scale = options.scale;\n  }\n\n  compute(x, y) {\n    var sum = 0;\n    for (var i = 0; i < x.length; i++) {\n      sum += x[i] * y[i];\n    }\n    return Math.pow(this.scale * sum + this.constant, this.degree);\n  }\n}\n\nmodule.exports = PolynomialKernel;\n","'use strict';\n\nconst defaultOptions = {\n  alpha: 0.01,\n  constant: -Math.E\n};\n\nclass SigmoidKernel {\n  constructor(options) {\n    options = Object.assign({}, defaultOptions, options);\n    this.alpha = options.alpha;\n    this.constant = options.constant;\n  }\n\n  compute(x, y) {\n    var sum = 0;\n    for (var i = 0; i < x.length; i++) {\n      sum += x[i] * y[i];\n    }\n    return Math.tanh(this.alpha * sum + this.constant);\n  }\n}\n\nmodule.exports = SigmoidKernel;\n","'use strict';\n\nconst defaultOptions = {\n  sigma: 1,\n  degree: 1\n};\n\nclass ANOVAKernel {\n  constructor(options) {\n    options = Object.assign({}, defaultOptions, options);\n    this.sigma = options.sigma;\n    this.degree = options.degree;\n  }\n\n  compute(x, y) {\n    var sum = 0;\n    var len = Math.min(x.length, y.length);\n    for (var i = 1; i <= len; ++i) {\n      sum += Math.pow(\n        Math.exp(\n          -this.sigma *\n            Math.pow(Math.pow(x[i - 1], i) - Math.pow(y[i - 1], i), 2)\n        ),\n        this.degree\n      );\n    }\n    return sum;\n  }\n}\n\nmodule.exports = ANOVAKernel;\n","'use strict';\n\nconst { squaredEuclidean } = require('ml-distance-euclidean');\n\nconst defaultOptions = {\n  sigma: 1\n};\n\nclass CauchyKernel {\n  constructor(options) {\n    options = Object.assign({}, defaultOptions, options);\n    this.sigma = options.sigma;\n  }\n\n  compute(x, y) {\n    return 1 / (1 + squaredEuclidean(x, y) / (this.sigma * this.sigma));\n  }\n}\n\nmodule.exports = CauchyKernel;\n","'use strict';\n\nconst { euclidean } = require('ml-distance-euclidean');\n\nconst defaultOptions = {\n  sigma: 1\n};\n\nclass ExponentialKernel {\n  constructor(options) {\n    options = Object.assign({}, defaultOptions, options);\n    this.sigma = options.sigma;\n    this.divisor = 2 * options.sigma * options.sigma;\n  }\n\n  compute(x, y) {\n    const distance = euclidean(x, y);\n    return Math.exp(-distance / this.divisor);\n  }\n}\n\nmodule.exports = ExponentialKernel;\n","'use strict';\n\nclass HistogramIntersectionKernel {\n  compute(x, y) {\n    var min = Math.min(x.length, y.length);\n    var sum = 0;\n    for (var i = 0; i < min; ++i) {\n      sum += Math.min(x[i], y[i]);\n    }\n\n    return sum;\n  }\n}\n\nmodule.exports = HistogramIntersectionKernel;\n","'use strict';\n\nconst { euclidean } = require('ml-distance-euclidean');\n\nconst defaultOptions = {\n  sigma: 1\n};\n\nclass LaplacianKernel {\n  constructor(options) {\n    options = Object.assign({}, defaultOptions, options);\n    this.sigma = options.sigma;\n  }\n\n  compute(x, y) {\n    const distance = euclidean(x, y);\n    return Math.exp(-distance / this.sigma);\n  }\n}\n\nmodule.exports = LaplacianKernel;\n","'use strict';\n\nconst { squaredEuclidean } = require('ml-distance-euclidean');\n\nconst defaultOptions = {\n  constant: 1\n};\n\nclass MultiquadraticKernel {\n  constructor(options) {\n    options = Object.assign({}, defaultOptions, options);\n    this.constant = options.constant;\n  }\n\n  compute(x, y) {\n    return Math.sqrt(squaredEuclidean(x, y) + this.constant * this.constant);\n  }\n}\n\nmodule.exports = MultiquadraticKernel;\n","'use strict';\n\nconst { squaredEuclidean } = require('ml-distance-euclidean');\n\nconst defaultOptions = {\n  constant: 1\n};\n\nclass RationalQuadraticKernel {\n  constructor(options) {\n    options = Object.assign({}, defaultOptions, options);\n    this.constant = options.constant;\n  }\n\n  compute(x, y) {\n    const distance = squaredEuclidean(x, y);\n    return 1 - distance / (distance + this.constant);\n  }\n}\n\nmodule.exports = RationalQuadraticKernel;\n","'use strict';\n\nconst { Matrix, MatrixTransposeView } = require('ml-matrix');\nconst GaussianKernel = require('ml-kernel-gaussian');\nconst PolynomialKernel = require('ml-kernel-polynomial');\nconst SigmoidKernel = require('ml-kernel-sigmoid');\n\nconst ANOVAKernel = require('./kernels/anova-kernel');\nconst CauchyKernel = require('./kernels/cauchy-kernel');\nconst ExponentialKernel = require('./kernels/exponential-kernel');\nconst HistogramKernel = require('./kernels/histogram-intersection-kernel');\nconst LaplacianKernel = require('./kernels/laplacian-kernel');\nconst MultiquadraticKernel = require('./kernels/multiquadratic-kernel');\nconst RationalKernel = require('./kernels/rational-quadratic-kernel');\n\nconst kernelType = {\n  gaussian: GaussianKernel,\n  rbf: GaussianKernel,\n  polynomial: PolynomialKernel,\n  poly: PolynomialKernel,\n  anova: ANOVAKernel,\n  cauchy: CauchyKernel,\n  exponential: ExponentialKernel,\n  histogram: HistogramKernel,\n  min: HistogramKernel,\n  laplacian: LaplacianKernel,\n  multiquadratic: MultiquadraticKernel,\n  rational: RationalKernel,\n  sigmoid: SigmoidKernel,\n  mlp: SigmoidKernel\n};\n\nclass Kernel {\n  constructor(type, options) {\n    this.kernelType = type;\n    if (type === 'linear') return;\n\n    if (typeof type === 'string') {\n      type = type.toLowerCase();\n\n      var KernelConstructor = kernelType[type];\n      if (KernelConstructor) {\n        this.kernelFunction = new KernelConstructor(options);\n      } else {\n        throw new Error(`unsupported kernel type: ${type}`);\n      }\n    } else if (typeof type === 'object' && typeof type.compute === 'function') {\n      this.kernelFunction = type;\n    } else {\n      throw new TypeError(\n        'first argument must be a valid kernel type or instance'\n      );\n    }\n  }\n\n  compute(inputs, landmarks) {\n    inputs = Matrix.checkMatrix(inputs);\n    if (landmarks === undefined) {\n      landmarks = inputs;\n    } else {\n      landmarks = Matrix.checkMatrix(landmarks);\n    }\n    if (this.kernelType === 'linear') {\n      return inputs.mmul(new MatrixTransposeView(landmarks));\n    }\n\n    const kernelMatrix = new Matrix(inputs.rows, landmarks.rows);\n    if (inputs === landmarks) {\n      // fast path, matrix is symmetric\n      for (let i = 0; i < inputs.rows; i++) {\n        for (let j = i; j < inputs.rows; j++) {\n          const value = this.kernelFunction.compute(\n            inputs.getRow(i),\n            inputs.getRow(j)\n          );\n          kernelMatrix.set(i, j, value);\n          kernelMatrix.set(j, i, value);\n        }\n      }\n    } else {\n      for (let i = 0; i < inputs.rows; i++) {\n        for (let j = 0; j < landmarks.rows; j++) {\n          kernelMatrix.set(\n            i,\n            j,\n            this.kernelFunction.compute(inputs.getRow(i), landmarks.getRow(j))\n          );\n        }\n      }\n    }\n    return kernelMatrix;\n  }\n}\n\nmodule.exports = Kernel;\n","import Kernel from \"ml-kernel\";\nimport { Matrix, solve } from \"ml-matrix\";\nimport { BaseRegression } from \"ml-regression-base\";\n\nconst defaultOptions = {\n  lambda: 0.1,\n  kernelType: \"gaussian\",\n  kernelOptions: {},\n  computeCoefficient: false,\n};\n\n// Implements the Kernel ridge regression algorithm.\n// http://www.ics.uci.edu/~welling/classnotes/papers_class/Kernel-Ridge.pdf\nexport class KernelRidgeRegression extends BaseRegression {\n  constructor(inputs, outputs, options) {\n    super();\n    if (inputs === true) {\n      // reloading model\n      this.alpha = outputs.alpha;\n      this.inputs = outputs.inputs;\n      this.kernelType = outputs.kernelType;\n      this.kernelOptions = outputs.kernelOptions;\n      this.kernel = new Kernel(outputs.kernelType, outputs.kernelOptions);\n    } else {\n      inputs = Matrix.checkMatrix(inputs);\n      options = { ...defaultOptions, ...options };\n\n      const kernelFunction = new Kernel(\n        options.kernelType,\n        options.kernelOptions,\n      );\n      const K = kernelFunction.compute(inputs);\n      const n = inputs.rows;\n      K.add(Matrix.eye(n, n).mul(options.lambda));\n\n      this.alpha = solve(K, outputs);\n      this.inputs = inputs;\n      this.kernelType = options.kernelType;\n      this.kernelOptions = options.kernelOptions;\n      this.kernel = kernelFunction;\n    }\n  }\n\n  _predict(newInputs) {\n    return this.kernel\n      .compute([newInputs], this.inputs)\n      .mmul(this.alpha)\n      .getRow(0);\n  }\n\n  toJSON() {\n    return {\n      name: \"kernelRidgeRegression\",\n      alpha: this.alpha,\n      inputs: this.inputs,\n      kernelType: this.kernelType,\n      kernelOptions: this.kernelOptions,\n    };\n  }\n\n  static load(json) {\n    if (json.name !== \"kernelRidgeRegression\") {\n      throw new TypeError(\"not a KRR model\");\n    }\n    return new KernelRidgeRegression(true, json);\n  }\n}\n","import { Matrix, SVD } from \"ml-matrix\";\nimport { BaseRegression } from \"ml-regression-base\";\n\nconst defaultOptions = {\n  order: 2,\n};\n// Implements the Kernel ridge regression algorithm.\n// http://www.ics.uci.edu/~welling/classnotes/papers_class/Kernel-Ridge.pdf\nexport class PolynomialFitRegression2D extends BaseRegression {\n  /**\n   * Constructor for the 2D polynomial fitting\n   * @param inputs\n   * @param outputs\n   * @param options\n   */\n  constructor(inputs, outputs, options = {}) {\n    super();\n    if (inputs === true) {\n      // reloading model\n      this.coefficients = Matrix.columnVector(outputs.coefficients);\n      this.order = outputs.order;\n      if (outputs.r) {\n        this.r = outputs.r;\n        this.r2 = outputs.r2;\n      }\n      if (outputs.chi2) {\n        this.chi2 = outputs.chi2;\n      }\n    } else {\n      options = { ...defaultOptions, ...options };\n      this.order = options.order;\n      this.coefficients = [];\n      this.X = inputs;\n      this.y = outputs;\n\n      this.train(this.X, this.y, options);\n    }\n  }\n\n  /**\n   * Function that fits the model given the data(X) and predictions(y).\n   * The third argument is an object with the following options:\n   * order: order of the polynomial to fit.\n   * @param {Matrix} X - A matrix with n rows and 2 columns.\n   * @param {Matrix} y - A vector of the prediction values.\n   */\n  train(X, y) {\n    if (!Matrix.isMatrix(X)) X = new Matrix(X);\n    if (!Matrix.isMatrix(y)) y = Matrix.columnVector(y);\n\n    if (y.rows !== X.rows) {\n      y = y.transpose();\n    }\n\n    if (X.columns !== 2) {\n      throw new RangeError(\n        `You give X with ${X.columns} columns and it must be 2`,\n      );\n    }\n    if (X.rows !== y.rows) {\n      throw new RangeError(\"X and y must have the same rows\");\n    }\n\n    let examples = X.rows;\n    let coefficients = ((this.order + 2) * (this.order + 1)) / 2;\n    if (examples < coefficients) {\n      throw new Error(\n        \"Insufficient number of points to create regression model.\",\n      );\n    }\n    this.coefficients = new Array(coefficients);\n\n    let x1 = X.getColumnVector(0);\n    let x2 = X.getColumnVector(1);\n\n    let scaleX1 = 1 / x1.clone().abs().max();\n    let scaleX2 = 1 / x2.clone().abs().max();\n    let scaleY = 1 / y.clone().abs().max();\n\n    x1.mulColumn(0, scaleX1);\n    x2.mulColumn(0, scaleX2);\n    y.mulColumn(0, scaleY);\n\n    let A = new Matrix(examples, coefficients);\n    let col = 0;\n\n    for (let i = 0; i <= this.order; ++i) {\n      let limit = this.order - i;\n      for (let j = 0; j <= limit; ++j) {\n        let result = powColVector(x1, i).mulColumnVector(powColVector(x2, j));\n        A.setColumn(col, result);\n        col++;\n      }\n    }\n\n    let svd = new SVD(A.transpose(), {\n      computeLeftSingularVectors: true,\n      computeRightSingularVectors: true,\n      autoTranspose: false,\n    });\n\n    let qqs = Matrix.rowVector(svd.diagonal);\n    qqs = qqs.apply((i, j) => {\n      if (qqs.get(i, j) >= 1e-15) qqs.set(i, j, 1 / qqs.get(i, j));\n      else qqs.set(i, j, 0);\n    });\n\n    let qqs1 = Matrix.zeros(examples, coefficients);\n    for (let i = 0; i < coefficients; ++i) {\n      qqs1.set(i, i, qqs.get(0, i));\n    }\n\n    qqs = qqs1;\n\n    let U = svd.rightSingularVectors;\n    let V = svd.leftSingularVectors;\n\n    this.coefficients = V.mmul(qqs.transpose()).mmul(U.transpose()).mmul(y);\n\n    col = 0;\n\n    for (let i = 0; i <= coefficients; ++i) {\n      let limit = this.order - i;\n      for (let j = 0; j <= limit; ++j) {\n        this.coefficients.set(\n          col,\n          0,\n          (this.coefficients.get(col, 0) * scaleX1 ** i * scaleX2 ** j) /\n            scaleY,\n        );\n        col++;\n      }\n    }\n  }\n\n  _predict(newInputs) {\n    let x1 = newInputs[0];\n    let x2 = newInputs[1];\n\n    let y = 0;\n    let column = 0;\n\n    for (let i = 0; i <= this.order; i++) {\n      for (let j = 0; j <= this.order - i; j++) {\n        y += x1 ** i * x2 ** j * this.coefficients.get(column, 0);\n        column++;\n      }\n    }\n\n    return y;\n  }\n\n  toJSON() {\n    return {\n      name: \"polyfit2D\",\n      order: this.order,\n      coefficients: this.coefficients,\n    };\n  }\n\n  static load(json) {\n    if (json.name !== \"polyfit2D\") {\n      throw new TypeError(\"not a polyfit2D model\");\n    }\n    return new PolynomialFitRegression2D(true, json);\n  }\n}\n\n/**\n * Function that given a column vector return this: vector^power\n * @param x - Column vector.\n * @param power - Pow number.\n * @returns {Suite|Matrix}\n */\nfunction powColVector(x, power) {\n  let result = x.clone();\n  for (let i = 0; i < x.rows; ++i) {\n    result.set(i, 0, result.get(i, 0) ** power);\n  }\n  return result;\n}\n","(function(){function a(d){for(var e=0,f=d.length-1,g=void 0,h=void 0,i=void 0,j=c(e,f);!0;){if(f<=e)return d[j];if(f==e+1)return d[e]>d[f]&&b(d,e,f),d[j];for(g=c(e,f),d[g]>d[f]&&b(d,g,f),d[e]>d[f]&&b(d,e,f),d[g]>d[e]&&b(d,g,e),b(d,g,e+1),h=e+1,i=f;!0;){do h++;while(d[e]>d[h]);do i--;while(d[i]>d[e]);if(i<h)break;b(d,h,i)}b(d,e,i),i<=j&&(e=h),i>=j&&(f=i-1)}}var b=function b(d,e,f){var _ref;return _ref=[d[f],d[e]],d[e]=_ref[0],d[f]=_ref[1],_ref},c=function c(d,e){return~~((d+e)/2)};'undefined'!=typeof module&&module.exports?module.exports=a:window.median=a})();\n","import { isAnyArray } from 'is-any-array';\nimport quickSelectMedian from 'median-quickselect';\n\nfunction median(input) {\n  if (!isAnyArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  return quickSelectMedian(input.slice());\n}\n\nexport { median as default };\n","import median from 'ml-array-median';\nimport {\n  BaseRegression,\n  checkArrayLength,\n  maybeToPrecision,\n} from 'ml-regression-base';\n\nexport class TheilSenRegression extends BaseRegression {\n  /**\n   * Theil–Sen estimator\n   * https://en.wikipedia.org/wiki/Theil%E2%80%93Sen_estimator\n   * @param {Array<number>|boolean} x\n   * @param {Array<number>|object} y\n   * @constructor\n   */\n  constructor(x, y) {\n    super();\n    if (x === true) {\n      // loads the model\n      this.slope = y.slope;\n      this.intercept = y.intercept;\n      this.coefficients = y.coefficients;\n    } else {\n      // creates the model\n      checkArrayLength(x, y);\n      theilSen(this, x, y);\n    }\n  }\n\n  toJSON() {\n    return {\n      name: 'TheilSenRegression',\n      slope: this.slope,\n      intercept: this.intercept,\n    };\n  }\n\n  _predict(input) {\n    return this.slope * input + this.intercept;\n  }\n\n  computeX(input) {\n    return (input - this.intercept) / this.slope;\n  }\n\n  toString(precision) {\n    let result = 'f(x) = ';\n    if (this.slope) {\n      let xFactor = maybeToPrecision(this.slope, precision);\n      result += `${Math.abs(xFactor - 1) < 1e-5 ? '' : `${xFactor} * `}x`;\n      if (this.intercept) {\n        let absIntercept = Math.abs(this.intercept);\n        let operator = absIntercept === this.intercept ? '+' : '-';\n        result += ` ${operator} ${maybeToPrecision(absIntercept, precision)}`;\n      }\n    } else {\n      result += maybeToPrecision(this.intercept, precision);\n    }\n    return result;\n  }\n\n  toLaTeX(precision) {\n    return this.toString(precision);\n  }\n\n  static load(json) {\n    if (json.name !== 'TheilSenRegression') {\n      throw new TypeError('not a Theil-Sen model');\n    }\n    return new TheilSenRegression(true, json);\n  }\n}\n\nfunction theilSen(regression, x, y) {\n  let len = x.length;\n  let slopes = new Array(len * len);\n  let count = 0;\n  for (let i = 0; i < len; ++i) {\n    for (let j = i + 1; j < len; ++j) {\n      if (x[i] !== x[j]) {\n        slopes[count++] = (y[j] - y[i]) / (x[j] - x[i]);\n      }\n    }\n  }\n  slopes.length = count;\n  let medianSlope = median(slopes);\n\n  let cuts = new Array(len);\n  for (let i = 0; i < len; ++i) {\n    cuts[i] = y[i] - medianSlope * x[i];\n  }\n\n  regression.slope = medianSlope;\n  regression.intercept = median(cuts);\n  regression.coefficients = [regression.intercept, regression.slope];\n}\n","export function predict(x, powers, coefficients) {\n    let y = 0;\n    for (let k = 0; k < powers.length; k++) {\n        y += coefficients[k] * x ** powers[k];\n    }\n    return y;\n}\n//# sourceMappingURL=predict.js.map","import { solve } from 'ml-matrix';\n/**\n * @ignore\n * @param tuple\n * @param powers\n * @returns\n */\nexport function calcCoefficients(tuple, powers) {\n    const X = [];\n    const Y = [];\n    for (let i = 0; i < tuple.length; i++) {\n        Y[i] = [tuple[i].y];\n        X[i] = new Array(powers.length);\n        for (let j = 0; j < powers.length; j++) {\n            X[i][j] = tuple[i].x ** powers[j];\n        }\n    }\n    return solve(X, Y).to1DArray();\n}\n//# sourceMappingURL=calcCoefficients.js.map","export function residualsMedian(residuals) {\n    residuals.sort((a, b) => a.residual - b.residual);\n    const l = residuals.length;\n    const half = Math.floor(l / 2);\n    return l % 2 === 0 ? residuals[half - 1] : residuals[half];\n}\n//# sourceMappingURL=residualsMedian.js.map","import { calcCoefficients } from './calcCoefficients';\nimport { getRandomTuples } from './getRandomTuples';\nimport { predict } from './predict';\nimport { residualsMedian } from './residualsMedian';\nexport function robustPolynomial(regression, x, y, degree) {\n    const powers = new Array(degree).fill(0).map((_, index) => index);\n    const tuples = getRandomTuples(x, y, degree);\n    let min;\n    for (const tuple of tuples) {\n        const coefficients = calcCoefficients(tuple, powers);\n        const residuals = [];\n        for (let j = 0; j < x.length; j++) {\n            const residual = y[j] - predict(x[j], powers, coefficients);\n            residuals[j] = {\n                residual: residual * residual,\n                coefficients,\n            };\n        }\n        const median = residualsMedian(residuals);\n        if (!min || median.residual < min.residual) {\n            min = median;\n        }\n    }\n    regression.degree = degree;\n    regression.powers = powers;\n    regression.coefficients = min ? min.coefficients : [];\n}\n//# sourceMappingURL=robustPolynomial.js.map","/**\n * @ignore\n * @param x\n * @param y\n * @param degree\n * @returns\n */\nexport function getRandomTuples(x, y, degree) {\n    const len = Math.floor(x.length / degree);\n    const tuples = new Array(len);\n    for (let i = 0; i < x.length; i++) {\n        let pos = Math.floor(Math.random() * len);\n        let counter = 0;\n        while (counter < x.length) {\n            if (!tuples[pos]) {\n                tuples[pos] = [\n                    {\n                        x: x[i],\n                        y: y[i],\n                    },\n                ];\n                break;\n            }\n            else if (tuples[pos].length < degree) {\n                tuples[pos].push({\n                    x: x[i],\n                    y: y[i],\n                });\n                break;\n            }\n            else {\n                counter++;\n                pos = (pos + 1) % len;\n            }\n        }\n        if (counter === x.length) {\n            return tuples;\n        }\n    }\n    return tuples;\n}\n//# sourceMappingURL=getRandomTuples.js.map","import { isAnyArray } from 'is-any-array';\nimport { BaseRegression, checkArrayLength, maybeToPrecision, } from 'ml-regression-base';\nimport { predict } from './utilities/predict';\nimport { robustPolynomial } from './utilities/robustPolynomial';\n/**\n * @class RobustPolynomialRegression\n * @param x\n * @param y\n * @param degree - polynomial degree\n */\nexport class RobustPolynomialRegression extends BaseRegression {\n    constructor(x, y, degree) {\n        super();\n        if (isAnyArray(x)) {\n            checkArrayLength(x, y);\n            robustPolynomial(this, x, y, degree);\n        }\n        else {\n            const name = 'robustPolynomialRegression';\n            const model = x;\n            this.degree = model.degree;\n            this.powers = model.powers;\n            this.coefficients = model.coefficients;\n            this.name = name;\n        }\n    }\n    toJSON() {\n        return {\n            name: this.name,\n            degree: this.degree,\n            powers: this.powers,\n            coefficients: this.coefficients,\n        };\n    }\n    _predict(x) {\n        return predict(x, this.powers, this.coefficients);\n    }\n    /**\n     * Display the formula\n     * @param precision - precision for the numbers\n     * @returns\n     */\n    toString(precision) {\n        return this._toFormula(precision, false);\n    }\n    /**\n     * Display the formula in LaTeX format\n     * @param precision - precision for the numbers\n     * @returns\n     */\n    toLaTeX(precision) {\n        return this._toFormula(precision, true);\n    }\n    _toFormula(precision, isLaTeX) {\n        let sup = '^';\n        let closeSup = '';\n        let times = ' * ';\n        if (isLaTeX) {\n            sup = '^{';\n            closeSup = '}';\n            times = '';\n        }\n        let fn = '';\n        let str = '';\n        const coefficients = this.coefficients;\n        const powers = this.powers;\n        for (let k = 0; k < coefficients.length; k++) {\n            str = '';\n            if (coefficients[k] !== 0) {\n                if (powers[k] === 0) {\n                    str = maybeToPrecision(coefficients[k], precision);\n                }\n                else if (powers[k] === 1) {\n                    str = `${maybeToPrecision(coefficients[k], precision) + times}x`;\n                }\n                else {\n                    str = `${maybeToPrecision(coefficients[k], precision) + times}x${sup}${powers[k]}${closeSup}`;\n                }\n                if (coefficients[k] > 0 && k !== coefficients.length - 1) {\n                    str = ` + ${str}`;\n                }\n                else if (k !== coefficients.length - 1) {\n                    str = ` ${str}`;\n                }\n            }\n            fn = str + fn;\n        }\n        if (fn.startsWith('+')) {\n            fn = fn.slice(1);\n        }\n        return `f(x) = ${fn}`;\n    }\n    static load(json) {\n        if (json.name !== 'robustPolynomialRegression') {\n            throw new TypeError('not a RobustPolynomialRegression model');\n        }\n        return new RobustPolynomialRegression(json, undefined, undefined);\n    }\n}\n//# sourceMappingURL=index.js.map","import { PotentialRegression } from \"./regression/potential-regression\";\n\nexport {\n  SimpleLinearRegression,\n  SimpleLinearRegression as SLR,\n} from \"ml-regression-simple-linear\";\nexport { PolynomialRegression } from \"ml-regression-polynomial\";\nexport { ExponentialRegression } from \"ml-regression-exponential\";\nexport { PowerRegression } from \"ml-regression-power\";\nexport { default as MultivariateLinearRegression } from \"ml-regression-multivariate-linear\";\nconst NLR = {\n  PotentialRegression,\n};\nexport { NLR, NLR as NonLinearRegression };\n\nexport {\n  KernelRidgeRegression,\n  KernelRidgeRegression as KRR,\n} from \"./regression/kernel-ridge-regression\";\nexport { PolynomialFitRegression2D as PolinomialFitting2D } from \"./regression/poly-fit-regression2d\";\n\n// robust regressions\nexport { TheilSenRegression } from \"ml-regression-theil-sen\";\nexport { RobustPolynomialRegression } from \"ml-regression-robust-polynomial\";\n"],"names":["toString","Object","prototype","isAnyArray","value","tag","call","endsWith","includes","checkArrayLength","x","y","TypeError","length","RangeError","BaseRegression","constructor","Error","predict","this","_predict","xVal","push","train","precision","toLaTeX","score","n","y2","Array","i","xSum","ySum","chi2","rmsd","xSquared","ySquared","xY","r","Math","sqrt","r2","maybeToPrecision","number","figures","toPrecision","input","output","options","arguments","undefined","currentMin","_options$fromIndex","fromIndex","_options$toIndex","toIndex","Number","isInteger","minValue","min","currentMax","maxValue","max","_options$min","autoMinMax","_options$max","factor","defineProperty","matrix","require$$0","rescale","require$$1","indent","repeat","indentData","inspectMatrixWithOptions","maxRows","maxColumns","maxNumSize","padMinus","name","rows","columns","maxI","maxJ","result","loop","j","get","line","formatNumber","join","inspectData","num","formatNumber2","padEnd","len","str","fix","toFixed","startsWith","exp","toExponential","slice","checkRowIndex","index","outer","checkColumnIndex","checkRowVector","vector","to1DArray","checkColumnVector","checkRowIndices","rowIndices","checkColumnIndices","columnIndices","checkRange","startRow","endRow","startColumn","endColumn","checkNumber","newArray","array","checkNonEmpty","isEmpty","AbstractMatrix","from1DArray","newRows","newColumns","newData","newMatrix","Matrix","row","column","set","rowVector","columnVector","zeros","ones","fill","rand","random","randInt","interval","round","eye","diag","data","l","matrix1","matrix2","checkMatrix","isMatrix","klass","size","apply","callback","to2DArray","copy","toJSON","isRowVector","isColumnVector","isVector","isSquare","isSymmetric","isDistance","isEchelonForm","previousColumn","checked","isReducedEchelonForm","k","echelonForm","clone","h","iMax","swapRows","tmp","reducedEchelonForm","m","maxRow","p","pivot","setSubMatrix","neg","mulS","getRow","getRowVector","setRow","row1","row2","temp","getColumn","getColumnVector","setColumn","swapColumns","column1","column2","addRowVector","subRowVector","mulRowVector","divRowVector","addColumnVector","subColumnVector","mulColumnVector","divColumnVector","mulRow","mulColumn","by","NaN","NEGATIVE_INFINITY","maxIndex","v","idx","POSITIVE_INFINITY","minIndex","maxRowIndex","minRow","minRowIndex","maxColumn","maxColumnIndex","minColumn","minColumnIndex","norm","type","dot","cumulativeSum","sum","vector2","vector1","mmul","other","Bcolj","Float64Array","s","mpow","scalar","bb","e","strassen2x2","a11","b11","a12","b12","a21","b21","a22","b22","m1","m2","m3","m4","m5","c00","c01","c10","c11","strassen3x3","a00","a01","a02","a10","a20","b00","b01","b02","b10","b20","m6","m7","m8","m9","m12","m13","m14","m15","m16","m17","m18","c02","c12","c20","c21","c22","mmulStrassen","r1","c1","c2","embed","mat","cols","c","resultat","console","warn","blockMult","a","b","halfRows","parseInt","halfCols","subMatrix","add","sub","scaleRows","isFinite","scaleColumns","flipRows","middle","ceil","first","last","flipColumns","kroneckerProduct","q","kroneckerSum","AxI","IxB","transpose","sortRows","compareFunction","compareNumbers","sort","sortColumns","subMatrixRow","indices","subMatrixColumn","selection","rowIndex","columnIndex","trace","from","to","entries","sumByRow","sumByColumn","sumAll","product","productByRow","productByColumn","productAll","mean","variance","unbiased","sum1","sum2","varianceByRow","varianceByColumn","varianceAll","standardDeviation","center","centerByRow","centerByColumn","centerAll","scale","getScaleByRow","scaleByRow","getScaleByColumn","scaleByColumn","divider","getScaleAll","scaleAll","Symbol","iterator","col","values","for","randomInt","diagonal","identity","negate","tensorProduct","initData","nRows","nColumns","super","arrayData","every","element","removeRow","splice","addRow","removeColumn","newRow","addColumn","addS","addM","subS","subM","subtract","subtractS","subtractM","mul","mulM","multiply","multiplyS","multiplyM","div","divS","divM","divide","divideS","divideM","mod","modS","modM","modulus","modulusS","modulusM","and","andS","andM","or","orS","orM","xor","xorS","xorM","leftShift","leftShiftS","leftShiftM","signPropagatingRightShift","signPropagatingRightShiftS","signPropagatingRightShiftM","rightShift","rightShiftS","rightShiftM","zeroFillRightShift","zeroFillRightShiftS","zeroFillRightShiftM","not","abs","acos","acosh","asin","asinh","atan","atanh","cbrt","clz32","cos","cosh","expm1","floor","fround","log","log1p","log10","log2","sign","sin","sinh","tan","tanh","trunc","pow","arg0","powS","powM","installMathOperations","SymmetricMatrix","diagonalSize","isSymmetricMatrix","klassType","upperRightEntries","toMatrix","removeCross","addCross","applyMask","mask","sidesToRemove","passthroughs","reverse","sideIndex","toCompact","compact","fromCompact","compactSize","JSON","stringify","upperRightValues","DistanceMatrix","isDistanceMatrix","klassSubType","sideSize","toSymmetricMatrix","BaseView","MatrixSelectionView","WrapperMatrix1D","_calculateIndex","WrapperMatrix2D","LuDecomposition","t","LUcolj","kmax","lu","pivotVector","pivotSign","LU","isSingular","solve","count","X","determinant","lowerTriangularMatrix","upperTriangularMatrix","pivotPermutationVector","hypotenuse","QrDecomposition","qr","rdiag","nrm","QR","Rdiag","isFullRank","orthogonalMatrix","SingularValueDecomposition","computeLeftSingularVectors","computeRightSingularVectors","autoTranspose","wantu","Boolean","wantv","swapped","aux","nu","ni","U","V","work","si","nct","nrt","mrc","pp","eps","EPSILON","kase","alpha","MIN_VALUE","isNaN","ks","f","cs","sn","sp","spm1","epm1","sk","ek","shift","g","Y","threshold","scols","Ls","rightSingularVectors","VL","vrows","urows","VLU","solveForDiagonal","inverse","vcols","ucols","condition","norm2","rank","tol","ii","leftSingularVectors","diagonalMatrix","leftHandSide","rightHandSide","useSVD","xrange","exception","range","dependenciesOneRow","error","thresholdValue","thresholdError","returnArray","EigenvalueDecomposition","assumeSymmetric","d","hh","tred2","dl1","c3","el1","s2","tst1","tql2","H","ort","low","high","orthes","nn","w","ra","sa","vr","vi","notlast","cdivres","exshift","z","iter","cdiv","hqr2","realEigenvalues","imaginaryEigenvalues","eigenvectorMatrix","xr","xi","yr","yi","CholeskyDecomposition","dimension","positiveDefinite","L","isPositiveDefinite","B","nipals","scaleScores","maxIterations","terminationCriteria","u","tOld","diff","counter","xResidual","residual","yResidual","betas","CHO","EVD","Matrix_1","MatrixColumnSelectionView","MatrixColumnView","MatrixFlipColumnView","MatrixFlipRowView","MatrixRowSelectionView","MatrixRowView","MatrixSubView","MatrixTransposeView_1","MatrixTransposeView","NIPALS","Nipals","SVD","correlation","xMatrix","yMatrix","yIsSame","sdx","sdy","corr","covariance","cov","_default","default","subMatrix0","subMatrix1","subMatrix2","linearDependencies","results","Abis","pseudoInverse_1","pseudoInverse","svdSolution","solve_1","wrap","PolynomialRegression","degree","powers","coefficients","interceptAtZero","isArray","nCoefficients","F","FT","A","regress","_toFormula","isLaTeX","sup","closeSup","times","fn","load","json","PotentialRegression","M","linear","SimpleLinearRegression","yObj","slope","intercept","computeX","xFactor","absIntercept","ExponentialRegression","er","yl","PowerRegression","pr","xl","newInputs","latex","replace","MultivariateLinearRegression","statistics","weights","inputs","outputs","xt","xx","xy","invxx","beta","fittedValues","map","ri","reduce","stdError","stdErrorMatrix","stdErrors","tStats","summary","regressionStatistics","standardError","observations","variables","label","tStat","model","squaredEuclidean","defaultOptions","sigma","gaussianKernel","assign","divisor","compute","distance","constant","polynomialKernel","E","sigmoidKernel","anovaKernel","cauchyKernel","euclidean","exponentialKernel","histogramIntersectionKernel","laplacianKernel","multiquadraticKernel","rationalQuadraticKernel","kernelType","gaussian","rbf","polynomial","require$$2","poly","anova","require$$4","cauchy","require$$5","exponential","require$$6","histogram","require$$7","laplacian","require$$8","multiquadratic","require$$9","rational","require$$10","sigmoid","require$$3","mlp","toLowerCase","KernelConstructor","kernelFunction","landmarks","kernelMatrix","lambda","kernelOptions","computeCoefficient","KernelRidgeRegression","kernel","Kernel","K","order","PolynomialFitRegression2D","examples","x1","x2","scaleX1","scaleX2","scaleY","limit","powColVector","svd","qqs","qqs1","power","_ref","module","exports","window","median","quickSelectMedian","TheilSenRegression","regression","slopes","medianSlope","cuts","theilSen","calcCoefficients","tuple","residualsMedian","residuals","half","robustPolynomial","_","tuples","pos","getRandomTuples","RobustPolynomialRegression","NLR"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,29,30,31,32,33,34,35,36,37]}